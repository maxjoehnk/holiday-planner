// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.4.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1723494681;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__run_background_jobs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_background_jobs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::run_background_jobs()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__attachments__add_trip_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_trip_attachment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_command = <crate::commands::add_trip_attachment::AddTripAttachment>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::attachments::add_trip_attachment(api_command)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__attachments__delete_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_attachment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_attachment_id = <uuid::Uuid>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::attachments::delete_attachment(api_attachment_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__attachments__read_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "read_attachment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_attachment_id = <uuid::Uuid>::sse_decode(&mut deserializer);
            let api_target_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::attachments::read_attachment(
                            api_attachment_id,
                            api_target_path,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__packing_list__add_packing_list_entry_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_packing_list_entry",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_command =
                <crate::commands::add_packing_list_entry::AddPackingListEntry>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::packing_list::add_packing_list_entry(api_command)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__packing_list__delete_packing_list_entry_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_packing_list_entry",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_command =
                <crate::commands::delete_packing_list_entry::DeletePackingListEntry>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::packing_list::delete_packing_list_entry(api_command)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__packing_list__get_packing_list_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_packing_list",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::packing_list::get_packing_list()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__trips__add_trip_location_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_trip_location",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_command = <crate::commands::add_trip_location::AddTripLocation>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::trips::add_trip_location(api_command)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__trips__create_trip_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_trip",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_command =
                <crate::commands::create_trip::CreateTrip>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::trips::create_trip(api_command)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__trips__get_trip_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_trip",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <uuid::Uuid>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::trips::get_trip(api_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__trips__get_trip_packing_list_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_trip_packing_list",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_trip_id = <uuid::Uuid>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::trips::get_trip_packing_list(api_trip_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__trips__get_trips_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_trips",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::trips::get_trips()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__trips__mark_as_packed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mark_as_packed",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_trip_id = <uuid::Uuid>::sse_decode(&mut deserializer);
            let api_entry_id = <uuid::Uuid>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::trips::mark_as_packed(api_trip_id, api_entry_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__trips__mark_as_unpacked_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mark_as_unpacked",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_trip_id = <uuid::Uuid>::sse_decode(&mut deserializer);
            let api_entry_id = <uuid::Uuid>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::trips::mark_as_unpacked(api_trip_id, api_entry_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__trips__search_locations_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "search_locations",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::trips::search_locations(api_query).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
            chrono::DateTime::from_timestamp_micros(inner)
                .expect("invalid or out-of-range datetime")
                .naive_utc(),
            chrono::Utc,
        );
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
    }
}

impl SseDecode for crate::models::Accomodation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_location = <crate::models::Location>::sse_decode(deserializer);
        let mut var_checkIn = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_checkOut = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_attachments = <Vec<crate::models::TripAttachment>>::sse_decode(deserializer);
        return crate::models::Accomodation {
            name: var_name,
            location: var_location,
            check_in: var_checkIn,
            check_out: var_checkOut,
            attachments: var_attachments,
        };
    }
}

impl SseDecode for crate::commands::add_packing_list_entry::AddPackingListEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_conditions =
            <Vec<crate::models::PackingListEntryCondition>>::sse_decode(deserializer);
        let mut var_quantity = <crate::models::Quantity>::sse_decode(deserializer);
        let mut var_category = <Option<String>>::sse_decode(deserializer);
        return crate::commands::add_packing_list_entry::AddPackingListEntry {
            name: var_name,
            description: var_description,
            conditions: var_conditions,
            quantity: var_quantity,
            category: var_category,
        };
    }
}

impl SseDecode for crate::commands::add_trip_attachment::AddTripAttachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tripId = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_path = <String>::sse_decode(deserializer);
        return crate::commands::add_trip_attachment::AddTripAttachment {
            trip_id: var_tripId,
            name: var_name,
            path: var_path,
        };
    }
}

impl SseDecode for crate::commands::add_trip_location::AddTripLocation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tripId = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_location = <crate::models::LocationEntry>::sse_decode(deserializer);
        return crate::commands::add_trip_location::AddTripLocation {
            trip_id: var_tripId,
            location: var_location,
        };
    }
}

impl SseDecode for crate::models::transits::Airport {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_iata = <String>::sse_decode(deserializer);
        let mut var_icao = <String>::sse_decode(deserializer);
        let mut var_city = <String>::sse_decode(deserializer);
        let mut var_country = <String>::sse_decode(deserializer);
        let mut var_terminal = <String>::sse_decode(deserializer);
        let mut var_gate = <Option<String>>::sse_decode(deserializer);
        return crate::models::transits::Airport {
            name: var_name,
            iata: var_iata,
            icao: var_icao,
            city: var_city,
            country: var_country,
            terminal: var_terminal,
            gate: var_gate,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::models::Coordinates {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_latitude = <f64>::sse_decode(deserializer);
        let mut var_longitude = <f64>::sse_decode(deserializer);
        return crate::models::Coordinates {
            latitude: var_latitude,
            longitude: var_longitude,
        };
    }
}

impl SseDecode for crate::commands::create_trip::CreateTrip {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_startDate = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_endDate = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_headerImage = <Option<Vec<u8>>>::sse_decode(deserializer);
        return crate::commands::create_trip::CreateTrip {
            name: var_name,
            start_date: var_startDate,
            end_date: var_endDate,
            header_image: var_headerImage,
        };
    }
}

impl SseDecode for crate::models::DailyWeatherForecast {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_day = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_minTemperature = <f64>::sse_decode(deserializer);
        let mut var_maxTemperature = <f64>::sse_decode(deserializer);
        let mut var_morningTemperature = <f64>::sse_decode(deserializer);
        let mut var_dayTemperature = <f64>::sse_decode(deserializer);
        let mut var_eveningTemperature = <f64>::sse_decode(deserializer);
        let mut var_nightTemperature = <f64>::sse_decode(deserializer);
        let mut var_condition = <crate::models::WeatherCondition>::sse_decode(deserializer);
        let mut var_precipitationAmount = <f64>::sse_decode(deserializer);
        let mut var_precipitationProbability = <f64>::sse_decode(deserializer);
        let mut var_windSpeed = <f64>::sse_decode(deserializer);
        return crate::models::DailyWeatherForecast {
            day: var_day,
            min_temperature: var_minTemperature,
            max_temperature: var_maxTemperature,
            morning_temperature: var_morningTemperature,
            day_temperature: var_dayTemperature,
            evening_temperature: var_eveningTemperature,
            night_temperature: var_nightTemperature,
            condition: var_condition,
            precipitation_amount: var_precipitationAmount,
            precipitation_probability: var_precipitationProbability,
            wind_speed: var_windSpeed,
        };
    }
}

impl SseDecode for crate::commands::delete_packing_list_entry::DeletePackingListEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
        return crate::commands::delete_packing_list_entry::DeletePackingListEntry { id: var_id };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::models::transits::Flight {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_flightNumber = <String>::sse_decode(deserializer);
        let mut var_departure = <crate::models::transits::Airport>::sse_decode(deserializer);
        let mut var_arrival = <crate::models::transits::Airport>::sse_decode(deserializer);
        let mut var_scheduledDepartureTime =
            <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_scheduledArrivalTime =
            <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_estimatedDepartureTime =
            <Option<chrono::DateTime<chrono::Utc>>>::sse_decode(deserializer);
        let mut var_estimatedArrivalTime =
            <Option<chrono::DateTime<chrono::Utc>>>::sse_decode(deserializer);
        let mut var_airline = <String>::sse_decode(deserializer);
        return crate::models::transits::Flight {
            flight_number: var_flightNumber,
            departure: var_departure,
            arrival: var_arrival,
            scheduled_departure_time: var_scheduledDepartureTime,
            scheduled_arrival_time: var_scheduledArrivalTime,
            estimated_departure_time: var_estimatedDepartureTime,
            estimated_arrival_time: var_estimatedArrivalTime,
            airline: var_airline,
        };
    }
}

impl SseDecode for crate::models::HourlyWeatherForecast {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_time = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_temperature = <f64>::sse_decode(deserializer);
        let mut var_windSpeed = <f64>::sse_decode(deserializer);
        let mut var_precipitationAmount = <f64>::sse_decode(deserializer);
        let mut var_precipitationProbability = <f64>::sse_decode(deserializer);
        let mut var_condition = <crate::models::WeatherCondition>::sse_decode(deserializer);
        return crate::models::HourlyWeatherForecast {
            time: var_time,
            temperature: var_temperature,
            wind_speed: var_windSpeed,
            precipitation_amount: var_precipitationAmount,
            precipitation_probability: var_precipitationProbability,
            condition: var_condition,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::models::Accomodation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::Accomodation>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::DailyWeatherForecast> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::DailyWeatherForecast>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::HourlyWeatherForecast> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::HourlyWeatherForecast>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::Location> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::Location>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::LocationEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::LocationEntry>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::PackingListEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::PackingListEntry>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::PackingListEntryCondition> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::PackingListEntryCondition>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::transits::Transit> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::transits::Transit>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::Trip> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::Trip>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::TripAttachment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::TripAttachment>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::TripPackingListEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::TripPackingListEntry>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::models::Location {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_coordinates = <crate::models::Coordinates>::sse_decode(deserializer);
        let mut var_city = <String>::sse_decode(deserializer);
        let mut var_country = <String>::sse_decode(deserializer);
        let mut var_forecast = <Option<crate::models::WeatherForecast>>::sse_decode(deserializer);
        let mut var_attachments = <Vec<crate::models::TripAttachment>>::sse_decode(deserializer);
        return crate::models::Location {
            coordinates: var_coordinates,
            city: var_city,
            country: var_country,
            forecast: var_forecast,
            attachments: var_attachments,
        };
    }
}

impl SseDecode for crate::models::LocationEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_coordinates = <crate::models::Coordinates>::sse_decode(deserializer);
        let mut var_country = <String>::sse_decode(deserializer);
        return crate::models::LocationEntry {
            name: var_name,
            coordinates: var_coordinates,
            country: var_country,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::DateTime<chrono::Utc>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::DateTime<chrono::Utc>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::Trip> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::Trip>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::WeatherForecast> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::WeatherForecast>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::models::PackingListEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_conditions =
            <Vec<crate::models::PackingListEntryCondition>>::sse_decode(deserializer);
        let mut var_quantity = <crate::models::Quantity>::sse_decode(deserializer);
        let mut var_category = <Option<String>>::sse_decode(deserializer);
        return crate::models::PackingListEntry {
            id: var_id,
            name: var_name,
            description: var_description,
            conditions: var_conditions,
            quantity: var_quantity,
            category: var_category,
        };
    }
}

impl SseDecode for crate::models::PackingListEntryCondition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_length = <u32>::sse_decode(deserializer);
                return crate::models::PackingListEntryCondition::MinTripDuration {
                    length: var_length,
                };
            }
            1 => {
                let mut var_length = <u32>::sse_decode(deserializer);
                return crate::models::PackingListEntryCondition::MaxTripDuration {
                    length: var_length,
                };
            }
            2 => {
                let mut var_temperature = <f64>::sse_decode(deserializer);
                return crate::models::PackingListEntryCondition::MinTemperature {
                    temperature: var_temperature,
                };
            }
            3 => {
                let mut var_temperature = <f64>::sse_decode(deserializer);
                return crate::models::PackingListEntryCondition::MaxTemperature {
                    temperature: var_temperature,
                };
            }
            4 => {
                let mut var_condition = <crate::models::WeatherCondition>::sse_decode(deserializer);
                let mut var_minProbability = <f64>::sse_decode(deserializer);
                return crate::models::PackingListEntryCondition::Weather {
                    condition: var_condition,
                    min_probability: var_minProbability,
                };
            }
            5 => {
                let mut var_tag = <String>::sse_decode(deserializer);
                return crate::models::PackingListEntryCondition::Tag { tag: var_tag };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::Quantity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_perDay = <Option<usize>>::sse_decode(deserializer);
        let mut var_perNight = <Option<usize>>::sse_decode(deserializer);
        let mut var_fixed = <Option<usize>>::sse_decode(deserializer);
        return crate::models::Quantity {
            per_day: var_perDay,
            per_night: var_perNight,
            fixed: var_fixed,
        };
    }
}

impl SseDecode for crate::models::transits::Train {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_departure = <crate::models::transits::TrainStation>::sse_decode(deserializer);
        let mut var_arrival = <crate::models::transits::TrainStation>::sse_decode(deserializer);
        let mut var_scheduledDepartureTime =
            <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_scheduledArrivalTime =
            <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_estimatedDepartureTime =
            <Option<chrono::DateTime<chrono::Utc>>>::sse_decode(deserializer);
        let mut var_estimatedArrivalTime =
            <Option<chrono::DateTime<chrono::Utc>>>::sse_decode(deserializer);
        return crate::models::transits::Train {
            departure: var_departure,
            arrival: var_arrival,
            scheduled_departure_time: var_scheduledDepartureTime,
            scheduled_arrival_time: var_scheduledArrivalTime,
            estimated_departure_time: var_estimatedDepartureTime,
            estimated_arrival_time: var_estimatedArrivalTime,
        };
    }
}

impl SseDecode for crate::models::transits::TrainStation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_scheduledPlatform = <String>::sse_decode(deserializer);
        let mut var_actualPlatform = <Option<String>>::sse_decode(deserializer);
        let mut var_city = <String>::sse_decode(deserializer);
        let mut var_country = <String>::sse_decode(deserializer);
        return crate::models::transits::TrainStation {
            name: var_name,
            scheduled_platform: var_scheduledPlatform,
            actual_platform: var_actualPlatform,
            city: var_city,
            country: var_country,
        };
    }
}

impl SseDecode for crate::models::transits::Transit {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::models::transits::Flight>::sse_decode(deserializer);
                return crate::models::transits::Transit::Flight(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::models::transits::Train>::sse_decode(deserializer);
                return crate::models::transits::Transit::Train(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::Trip {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_startDate = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_endDate = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_locations = <Vec<crate::models::Location>>::sse_decode(deserializer);
        let mut var_transits = <Vec<crate::models::transits::Transit>>::sse_decode(deserializer);
        let mut var_accommodations = <Vec<crate::models::Accomodation>>::sse_decode(deserializer);
        let mut var_headerImage = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_attachments = <Vec<crate::models::TripAttachment>>::sse_decode(deserializer);
        return crate::models::Trip {
            id: var_id,
            name: var_name,
            start_date: var_startDate,
            end_date: var_endDate,
            locations: var_locations,
            transits: var_transits,
            accommodations: var_accommodations,
            header_image: var_headerImage,
            attachments: var_attachments,
        };
    }
}

impl SseDecode for crate::models::TripAttachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_fileName = <String>::sse_decode(deserializer);
        let mut var_contentType = <String>::sse_decode(deserializer);
        return crate::models::TripAttachment {
            id: var_id,
            name: var_name,
            file_name: var_fileName,
            content_type: var_contentType,
        };
    }
}

impl SseDecode for crate::models::TripPackingListEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_packingListEntry = <crate::models::PackingListEntry>::sse_decode(deserializer);
        let mut var_isPacked = <bool>::sse_decode(deserializer);
        let mut var_explicitHidden = <bool>::sse_decode(deserializer);
        let mut var_explicitShown = <bool>::sse_decode(deserializer);
        let mut var_quantity = <Option<usize>>::sse_decode(deserializer);
        return crate::models::TripPackingListEntry {
            packing_list_entry: var_packingListEntry,
            is_packed: var_isPacked,
            explicit_hidden: var_explicitHidden,
            explicit_shown: var_explicitShown,
            quantity: var_quantity,
        };
    }
}

impl SseDecode for crate::models::TripPackingListModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_visible = <Vec<crate::models::TripPackingListEntry>>::sse_decode(deserializer);
        let mut var_hidden = <Vec<crate::models::TripPackingListEntry>>::sse_decode(deserializer);
        return crate::models::TripPackingListModel {
            visible: var_visible,
            hidden: var_hidden,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::models::WeatherCondition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::WeatherCondition::Thunderstorm,
            1 => crate::models::WeatherCondition::Sunny,
            2 => crate::models::WeatherCondition::Rain,
            3 => crate::models::WeatherCondition::Clouds,
            4 => crate::models::WeatherCondition::Snow,
            _ => unreachable!("Invalid variant for WeatherCondition: {}", inner),
        };
    }
}

impl SseDecode for crate::models::WeatherForecast {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_coordinates = <crate::models::Coordinates>::sse_decode(deserializer);
        let mut var_hourlyForecast =
            <Vec<crate::models::HourlyWeatherForecast>>::sse_decode(deserializer);
        let mut var_dailyForecast =
            <Vec<crate::models::DailyWeatherForecast>>::sse_decode(deserializer);
        return crate::models::WeatherForecast {
            coordinates: var_coordinates,
            hourly_forecast: var_hourlyForecast,
            daily_forecast: var_dailyForecast,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__init_app_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__run_background_jobs_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__attachments__add_trip_attachment_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        4 => {
            wire__crate__api__attachments__delete_attachment_impl(port, ptr, rust_vec_len, data_len)
        }
        5 => wire__crate__api__attachments__read_attachment_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__packing_list__add_packing_list_entry_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        7 => wire__crate__api__packing_list__delete_packing_list_entry_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        8 => {
            wire__crate__api__packing_list__get_packing_list_impl(port, ptr, rust_vec_len, data_len)
        }
        9 => wire__crate__api__trips__add_trip_location_impl(port, ptr, rust_vec_len, data_len),
        10 => wire__crate__api__trips__create_trip_impl(port, ptr, rust_vec_len, data_len),
        11 => wire__crate__api__trips__get_trip_impl(port, ptr, rust_vec_len, data_len),
        12 => {
            wire__crate__api__trips__get_trip_packing_list_impl(port, ptr, rust_vec_len, data_len)
        }
        13 => wire__crate__api__trips__get_trips_impl(port, ptr, rust_vec_len, data_len),
        14 => wire__crate__api__trips__mark_as_packed_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__trips__mark_as_unpacked_impl(port, ptr, rust_vec_len, data_len),
        16 => wire__crate__api__trips__search_locations_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::Accomodation {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.location.into_into_dart().into_dart(),
            self.check_in.into_into_dart().into_dart(),
            self.check_out.into_into_dart().into_dart(),
            self.attachments.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::Accomodation {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::Accomodation>
    for crate::models::Accomodation
{
    fn into_into_dart(self) -> crate::models::Accomodation {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::commands::add_packing_list_entry::AddPackingListEntry
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.conditions.into_into_dart().into_dart(),
            self.quantity.into_into_dart().into_dart(),
            self.category.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::commands::add_packing_list_entry::AddPackingListEntry
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::commands::add_packing_list_entry::AddPackingListEntry>
    for crate::commands::add_packing_list_entry::AddPackingListEntry
{
    fn into_into_dart(self) -> crate::commands::add_packing_list_entry::AddPackingListEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::commands::add_trip_attachment::AddTripAttachment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.trip_id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.path.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::commands::add_trip_attachment::AddTripAttachment
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::commands::add_trip_attachment::AddTripAttachment>
    for crate::commands::add_trip_attachment::AddTripAttachment
{
    fn into_into_dart(self) -> crate::commands::add_trip_attachment::AddTripAttachment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::commands::add_trip_location::AddTripLocation {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.trip_id.into_into_dart().into_dart(),
            self.location.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::commands::add_trip_location::AddTripLocation
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::commands::add_trip_location::AddTripLocation>
    for crate::commands::add_trip_location::AddTripLocation
{
    fn into_into_dart(self) -> crate::commands::add_trip_location::AddTripLocation {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::transits::Airport {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.iata.into_into_dart().into_dart(),
            self.icao.into_into_dart().into_dart(),
            self.city.into_into_dart().into_dart(),
            self.country.into_into_dart().into_dart(),
            self.terminal.into_into_dart().into_dart(),
            self.gate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::transits::Airport
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::transits::Airport>
    for crate::models::transits::Airport
{
    fn into_into_dart(self) -> crate::models::transits::Airport {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::Coordinates {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.latitude.into_into_dart().into_dart(),
            self.longitude.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::Coordinates {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::Coordinates> for crate::models::Coordinates {
    fn into_into_dart(self) -> crate::models::Coordinates {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::commands::create_trip::CreateTrip {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.start_date.into_into_dart().into_dart(),
            self.end_date.into_into_dart().into_dart(),
            self.header_image.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::commands::create_trip::CreateTrip
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::commands::create_trip::CreateTrip>
    for crate::commands::create_trip::CreateTrip
{
    fn into_into_dart(self) -> crate::commands::create_trip::CreateTrip {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::DailyWeatherForecast {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.day.into_into_dart().into_dart(),
            self.min_temperature.into_into_dart().into_dart(),
            self.max_temperature.into_into_dart().into_dart(),
            self.morning_temperature.into_into_dart().into_dart(),
            self.day_temperature.into_into_dart().into_dart(),
            self.evening_temperature.into_into_dart().into_dart(),
            self.night_temperature.into_into_dart().into_dart(),
            self.condition.into_into_dart().into_dart(),
            self.precipitation_amount.into_into_dart().into_dart(),
            self.precipitation_probability.into_into_dart().into_dart(),
            self.wind_speed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::DailyWeatherForecast
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::DailyWeatherForecast>
    for crate::models::DailyWeatherForecast
{
    fn into_into_dart(self) -> crate::models::DailyWeatherForecast {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::commands::delete_packing_list_entry::DeletePackingListEntry
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::commands::delete_packing_list_entry::DeletePackingListEntry
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::commands::delete_packing_list_entry::DeletePackingListEntry,
    > for crate::commands::delete_packing_list_entry::DeletePackingListEntry
{
    fn into_into_dart(self) -> crate::commands::delete_packing_list_entry::DeletePackingListEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::transits::Flight {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.flight_number.into_into_dart().into_dart(),
            self.departure.into_into_dart().into_dart(),
            self.arrival.into_into_dart().into_dart(),
            self.scheduled_departure_time.into_into_dart().into_dart(),
            self.scheduled_arrival_time.into_into_dart().into_dart(),
            self.estimated_departure_time.into_into_dart().into_dart(),
            self.estimated_arrival_time.into_into_dart().into_dart(),
            self.airline.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::transits::Flight
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::transits::Flight>
    for crate::models::transits::Flight
{
    fn into_into_dart(self) -> crate::models::transits::Flight {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::HourlyWeatherForecast {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.time.into_into_dart().into_dart(),
            self.temperature.into_into_dart().into_dart(),
            self.wind_speed.into_into_dart().into_dart(),
            self.precipitation_amount.into_into_dart().into_dart(),
            self.precipitation_probability.into_into_dart().into_dart(),
            self.condition.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::HourlyWeatherForecast
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::HourlyWeatherForecast>
    for crate::models::HourlyWeatherForecast
{
    fn into_into_dart(self) -> crate::models::HourlyWeatherForecast {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::Location {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.coordinates.into_into_dart().into_dart(),
            self.city.into_into_dart().into_dart(),
            self.country.into_into_dart().into_dart(),
            self.forecast.into_into_dart().into_dart(),
            self.attachments.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::Location {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::Location> for crate::models::Location {
    fn into_into_dart(self) -> crate::models::Location {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::LocationEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.coordinates.into_into_dart().into_dart(),
            self.country.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::LocationEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::LocationEntry>
    for crate::models::LocationEntry
{
    fn into_into_dart(self) -> crate::models::LocationEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PackingListEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.conditions.into_into_dart().into_dart(),
            self.quantity.into_into_dart().into_dart(),
            self.category.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PackingListEntry
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PackingListEntry>
    for crate::models::PackingListEntry
{
    fn into_into_dart(self) -> crate::models::PackingListEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PackingListEntryCondition {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::models::PackingListEntryCondition::MinTripDuration { length } => {
                [0.into_dart(), length.into_into_dart().into_dart()].into_dart()
            }
            crate::models::PackingListEntryCondition::MaxTripDuration { length } => {
                [1.into_dart(), length.into_into_dart().into_dart()].into_dart()
            }
            crate::models::PackingListEntryCondition::MinTemperature { temperature } => {
                [2.into_dart(), temperature.into_into_dart().into_dart()].into_dart()
            }
            crate::models::PackingListEntryCondition::MaxTemperature { temperature } => {
                [3.into_dart(), temperature.into_into_dart().into_dart()].into_dart()
            }
            crate::models::PackingListEntryCondition::Weather {
                condition,
                min_probability,
            } => [
                4.into_dart(),
                condition.into_into_dart().into_dart(),
                min_probability.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::PackingListEntryCondition::Tag { tag } => {
                [5.into_dart(), tag.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PackingListEntryCondition
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PackingListEntryCondition>
    for crate::models::PackingListEntryCondition
{
    fn into_into_dart(self) -> crate::models::PackingListEntryCondition {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::Quantity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.per_day.into_into_dart().into_dart(),
            self.per_night.into_into_dart().into_dart(),
            self.fixed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::Quantity {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::Quantity> for crate::models::Quantity {
    fn into_into_dart(self) -> crate::models::Quantity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::transits::Train {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.departure.into_into_dart().into_dart(),
            self.arrival.into_into_dart().into_dart(),
            self.scheduled_departure_time.into_into_dart().into_dart(),
            self.scheduled_arrival_time.into_into_dart().into_dart(),
            self.estimated_departure_time.into_into_dart().into_dart(),
            self.estimated_arrival_time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::transits::Train
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::transits::Train>
    for crate::models::transits::Train
{
    fn into_into_dart(self) -> crate::models::transits::Train {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::transits::TrainStation {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.scheduled_platform.into_into_dart().into_dart(),
            self.actual_platform.into_into_dart().into_dart(),
            self.city.into_into_dart().into_dart(),
            self.country.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::transits::TrainStation
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::transits::TrainStation>
    for crate::models::transits::TrainStation
{
    fn into_into_dart(self) -> crate::models::transits::TrainStation {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::transits::Transit {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::models::transits::Transit::Flight(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::models::transits::Transit::Train(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::transits::Transit
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::transits::Transit>
    for crate::models::transits::Transit
{
    fn into_into_dart(self) -> crate::models::transits::Transit {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::Trip {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.start_date.into_into_dart().into_dart(),
            self.end_date.into_into_dart().into_dart(),
            self.locations.into_into_dart().into_dart(),
            self.transits.into_into_dart().into_dart(),
            self.accommodations.into_into_dart().into_dart(),
            self.header_image.into_into_dart().into_dart(),
            self.attachments.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::Trip {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::Trip> for crate::models::Trip {
    fn into_into_dart(self) -> crate::models::Trip {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::TripAttachment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.file_name.into_into_dart().into_dart(),
            self.content_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::TripAttachment {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::TripAttachment>
    for crate::models::TripAttachment
{
    fn into_into_dart(self) -> crate::models::TripAttachment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::TripPackingListEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.packing_list_entry.into_into_dart().into_dart(),
            self.is_packed.into_into_dart().into_dart(),
            self.explicit_hidden.into_into_dart().into_dart(),
            self.explicit_shown.into_into_dart().into_dart(),
            self.quantity.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::TripPackingListEntry
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::TripPackingListEntry>
    for crate::models::TripPackingListEntry
{
    fn into_into_dart(self) -> crate::models::TripPackingListEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::TripPackingListModel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.visible.into_into_dart().into_dart(),
            self.hidden.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::TripPackingListModel
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::TripPackingListModel>
    for crate::models::TripPackingListModel
{
    fn into_into_dart(self) -> crate::models::TripPackingListModel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::WeatherCondition {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Thunderstorm => 0.into_dart(),
            Self::Sunny => 1.into_dart(),
            Self::Rain => 2.into_dart(),
            Self::Clouds => 3.into_dart(),
            Self::Snow => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::WeatherCondition
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::WeatherCondition>
    for crate::models::WeatherCondition
{
    fn into_into_dart(self) -> crate::models::WeatherCondition {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::WeatherForecast {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.coordinates.into_into_dart().into_dart(),
            self.hourly_forecast.into_into_dart().into_dart(),
            self.daily_forecast.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::WeatherForecast
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::WeatherForecast>
    for crate::models::WeatherForecast
{
    fn into_into_dart(self) -> crate::models::WeatherForecast {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.timestamp_micros(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
    }
}

impl SseEncode for crate::models::Accomodation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <crate::models::Location>::sse_encode(self.location, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.check_in, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.check_out, serializer);
        <Vec<crate::models::TripAttachment>>::sse_encode(self.attachments, serializer);
    }
}

impl SseEncode for crate::commands::add_packing_list_entry::AddPackingListEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Vec<crate::models::PackingListEntryCondition>>::sse_encode(self.conditions, serializer);
        <crate::models::Quantity>::sse_encode(self.quantity, serializer);
        <Option<String>>::sse_encode(self.category, serializer);
    }
}

impl SseEncode for crate::commands::add_trip_attachment::AddTripAttachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.trip_id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.path, serializer);
    }
}

impl SseEncode for crate::commands::add_trip_location::AddTripLocation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.trip_id, serializer);
        <crate::models::LocationEntry>::sse_encode(self.location, serializer);
    }
}

impl SseEncode for crate::models::transits::Airport {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.iata, serializer);
        <String>::sse_encode(self.icao, serializer);
        <String>::sse_encode(self.city, serializer);
        <String>::sse_encode(self.country, serializer);
        <String>::sse_encode(self.terminal, serializer);
        <Option<String>>::sse_encode(self.gate, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::models::Coordinates {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.latitude, serializer);
        <f64>::sse_encode(self.longitude, serializer);
    }
}

impl SseEncode for crate::commands::create_trip::CreateTrip {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.start_date, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.end_date, serializer);
        <Option<Vec<u8>>>::sse_encode(self.header_image, serializer);
    }
}

impl SseEncode for crate::models::DailyWeatherForecast {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.day, serializer);
        <f64>::sse_encode(self.min_temperature, serializer);
        <f64>::sse_encode(self.max_temperature, serializer);
        <f64>::sse_encode(self.morning_temperature, serializer);
        <f64>::sse_encode(self.day_temperature, serializer);
        <f64>::sse_encode(self.evening_temperature, serializer);
        <f64>::sse_encode(self.night_temperature, serializer);
        <crate::models::WeatherCondition>::sse_encode(self.condition, serializer);
        <f64>::sse_encode(self.precipitation_amount, serializer);
        <f64>::sse_encode(self.precipitation_probability, serializer);
        <f64>::sse_encode(self.wind_speed, serializer);
    }
}

impl SseEncode for crate::commands::delete_packing_list_entry::DeletePackingListEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.id, serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::models::transits::Flight {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.flight_number, serializer);
        <crate::models::transits::Airport>::sse_encode(self.departure, serializer);
        <crate::models::transits::Airport>::sse_encode(self.arrival, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.scheduled_departure_time, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.scheduled_arrival_time, serializer);
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(
            self.estimated_departure_time,
            serializer,
        );
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(
            self.estimated_arrival_time,
            serializer,
        );
        <String>::sse_encode(self.airline, serializer);
    }
}

impl SseEncode for crate::models::HourlyWeatherForecast {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.time, serializer);
        <f64>::sse_encode(self.temperature, serializer);
        <f64>::sse_encode(self.wind_speed, serializer);
        <f64>::sse_encode(self.precipitation_amount, serializer);
        <f64>::sse_encode(self.precipitation_probability, serializer);
        <crate::models::WeatherCondition>::sse_encode(self.condition, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::models::Accomodation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::Accomodation>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::DailyWeatherForecast> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::DailyWeatherForecast>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::HourlyWeatherForecast> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::HourlyWeatherForecast>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::Location> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::Location>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::LocationEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::LocationEntry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::PackingListEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::PackingListEntry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::PackingListEntryCondition> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::PackingListEntryCondition>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::transits::Transit> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::transits::Transit>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::Trip> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::Trip>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::TripAttachment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::TripAttachment>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::TripPackingListEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::TripPackingListEntry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::models::Location {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Coordinates>::sse_encode(self.coordinates, serializer);
        <String>::sse_encode(self.city, serializer);
        <String>::sse_encode(self.country, serializer);
        <Option<crate::models::WeatherForecast>>::sse_encode(self.forecast, serializer);
        <Vec<crate::models::TripAttachment>>::sse_encode(self.attachments, serializer);
    }
}

impl SseEncode for crate::models::LocationEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <crate::models::Coordinates>::sse_encode(self.coordinates, serializer);
        <String>::sse_encode(self.country, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::DateTime<chrono::Utc>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::DateTime<chrono::Utc>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::Trip> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::Trip>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::WeatherForecast> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::WeatherForecast>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::models::PackingListEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Vec<crate::models::PackingListEntryCondition>>::sse_encode(self.conditions, serializer);
        <crate::models::Quantity>::sse_encode(self.quantity, serializer);
        <Option<String>>::sse_encode(self.category, serializer);
    }
}

impl SseEncode for crate::models::PackingListEntryCondition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::PackingListEntryCondition::MinTripDuration { length } => {
                <i32>::sse_encode(0, serializer);
                <u32>::sse_encode(length, serializer);
            }
            crate::models::PackingListEntryCondition::MaxTripDuration { length } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(length, serializer);
            }
            crate::models::PackingListEntryCondition::MinTemperature { temperature } => {
                <i32>::sse_encode(2, serializer);
                <f64>::sse_encode(temperature, serializer);
            }
            crate::models::PackingListEntryCondition::MaxTemperature { temperature } => {
                <i32>::sse_encode(3, serializer);
                <f64>::sse_encode(temperature, serializer);
            }
            crate::models::PackingListEntryCondition::Weather {
                condition,
                min_probability,
            } => {
                <i32>::sse_encode(4, serializer);
                <crate::models::WeatherCondition>::sse_encode(condition, serializer);
                <f64>::sse_encode(min_probability, serializer);
            }
            crate::models::PackingListEntryCondition::Tag { tag } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(tag, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::Quantity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<usize>>::sse_encode(self.per_day, serializer);
        <Option<usize>>::sse_encode(self.per_night, serializer);
        <Option<usize>>::sse_encode(self.fixed, serializer);
    }
}

impl SseEncode for crate::models::transits::Train {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::transits::TrainStation>::sse_encode(self.departure, serializer);
        <crate::models::transits::TrainStation>::sse_encode(self.arrival, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.scheduled_departure_time, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.scheduled_arrival_time, serializer);
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(
            self.estimated_departure_time,
            serializer,
        );
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(
            self.estimated_arrival_time,
            serializer,
        );
    }
}

impl SseEncode for crate::models::transits::TrainStation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.scheduled_platform, serializer);
        <Option<String>>::sse_encode(self.actual_platform, serializer);
        <String>::sse_encode(self.city, serializer);
        <String>::sse_encode(self.country, serializer);
    }
}

impl SseEncode for crate::models::transits::Transit {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::transits::Transit::Flight(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::models::transits::Flight>::sse_encode(field0, serializer);
            }
            crate::models::transits::Transit::Train(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::models::transits::Train>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::Trip {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.start_date, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.end_date, serializer);
        <Vec<crate::models::Location>>::sse_encode(self.locations, serializer);
        <Vec<crate::models::transits::Transit>>::sse_encode(self.transits, serializer);
        <Vec<crate::models::Accomodation>>::sse_encode(self.accommodations, serializer);
        <Option<Vec<u8>>>::sse_encode(self.header_image, serializer);
        <Vec<crate::models::TripAttachment>>::sse_encode(self.attachments, serializer);
    }
}

impl SseEncode for crate::models::TripAttachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.file_name, serializer);
        <String>::sse_encode(self.content_type, serializer);
    }
}

impl SseEncode for crate::models::TripPackingListEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::PackingListEntry>::sse_encode(self.packing_list_entry, serializer);
        <bool>::sse_encode(self.is_packed, serializer);
        <bool>::sse_encode(self.explicit_hidden, serializer);
        <bool>::sse_encode(self.explicit_shown, serializer);
        <Option<usize>>::sse_encode(self.quantity, serializer);
    }
}

impl SseEncode for crate::models::TripPackingListModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::models::TripPackingListEntry>>::sse_encode(self.visible, serializer);
        <Vec<crate::models::TripPackingListEntry>>::sse_encode(self.hidden, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::models::WeatherCondition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::WeatherCondition::Thunderstorm => 0,
                crate::models::WeatherCondition::Sunny => 1,
                crate::models::WeatherCondition::Rain => 2,
                crate::models::WeatherCondition::Clouds => 3,
                crate::models::WeatherCondition::Snow => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::WeatherForecast {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Coordinates>::sse_encode(self.coordinates, serializer);
        <Vec<crate::models::HourlyWeatherForecast>>::sse_encode(self.hourly_forecast, serializer);
        <Vec<crate::models::DailyWeatherForecast>>::sse_encode(self.daily_forecast, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.4.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.4.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
