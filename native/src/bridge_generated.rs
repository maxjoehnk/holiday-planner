#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::commands::add_packing_list_entry::AddPackingListEntry;
use crate::commands::add_trip_location::AddTripLocation;
use crate::commands::create_trip::CreateTrip;
use crate::commands::delete_packing_list_entry::DeletePackingListEntry;
use crate::models::Coordinates;
use crate::models::DailyWeatherForecast;
use crate::models::HourlyWeatherForecast;
use crate::models::Location;
use crate::models::LocationEntry;
use crate::models::PackingListEntry;
use crate::models::PackingListEntryCondition;
use crate::models::Quantity;
use crate::models::Trip;
use crate::models::TripAttachment;
use crate::models::TripPackingListEntry;
use crate::models::TripPackingListModel;
use crate::models::WeatherCondition;
use crate::models::WeatherForecast;

// Section: wire functions

fn wire_init_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(init()),
    )
}
fn wire_get_trips_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<Trip>>(
        WrapInfo {
            debug_name: "get_trips",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_trips()),
    )
}
fn wire_create_trip_impl(port_: MessagePort, command: impl Wire2Api<CreateTrip> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Trip>(
        WrapInfo {
            debug_name: "create_trip",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_command = command.wire2api();
            move |task_callback| Ok(create_trip(api_command))
        },
    )
}
fn wire_get_packing_list_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<PackingListEntry>>(
        WrapInfo {
            debug_name: "get_packing_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_packing_list()),
    )
}
fn wire_add_packing_list_entry_impl(
    port_: MessagePort,
    command: impl Wire2Api<AddPackingListEntry> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, PackingListEntry>(
        WrapInfo {
            debug_name: "add_packing_list_entry",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_command = command.wire2api();
            move |task_callback| Ok(add_packing_list_entry(api_command))
        },
    )
}
fn wire_delete_packing_list_entry_impl(
    port_: MessagePort,
    command: impl Wire2Api<DeletePackingListEntry> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "delete_packing_list_entry",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_command = command.wire2api();
            move |task_callback| Ok(delete_packing_list_entry(api_command))
        },
    )
}
fn wire_get_trip_packing_list_impl(
    port_: MessagePort,
    trip_id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TripPackingListModel>(
        WrapInfo {
            debug_name: "get_trip_packing_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_trip_id = trip_id.wire2api();
            move |task_callback| Ok(get_trip_packing_list(api_trip_id))
        },
    )
}
fn wire_mark_as_packed_impl(
    port_: MessagePort,
    trip_id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
    entry_id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "mark_as_packed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_trip_id = trip_id.wire2api();
            let api_entry_id = entry_id.wire2api();
            move |task_callback| Ok(mark_as_packed(api_trip_id, api_entry_id))
        },
    )
}
fn wire_mark_as_unpacked_impl(
    port_: MessagePort,
    trip_id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
    entry_id: impl Wire2Api<uuid::Uuid> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "mark_as_unpacked",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_trip_id = trip_id.wire2api();
            let api_entry_id = entry_id.wire2api();
            move |task_callback| Ok(mark_as_unpacked(api_trip_id, api_entry_id))
        },
    )
}
fn wire_search_locations_impl(port_: MessagePort, query: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<LocationEntry>>(
        WrapInfo {
            debug_name: "search_locations",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_query = query.wire2api();
            move |task_callback| Ok(search_locations(api_query))
        },
    )
}
fn wire_add_trip_location_impl(
    port_: MessagePort,
    command: impl Wire2Api<AddTripLocation> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "add_trip_location",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_command = command.wire2api();
            move |task_callback| Ok(add_trip_location(api_command))
        },
    )
}
fn wire_run_background_jobs_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "run_background_jobs",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(run_background_jobs()),
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<chrono::DateTime<chrono::Utc>> for i64 {
    fn wire2api(self) -> chrono::DateTime<chrono::Utc> {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_utc(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
impl Wire2Api<WeatherCondition> for i32 {
    fn wire2api(self) -> WeatherCondition {
        match self {
            0 => WeatherCondition::Thunderstorm,
            1 => WeatherCondition::Sunny,
            2 => WeatherCondition::Rain,
            3 => WeatherCondition::Clouds,
            4 => WeatherCondition::Snow,
            _ => unreachable!("Invalid variant for WeatherCondition: {}", self),
        }
    }
}
// Section: impl IntoDart

impl support::IntoDart for Coordinates {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.latitude.into_into_dart().into_dart(),
            self.longitude.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Coordinates {}
impl rust2dart::IntoIntoDart<Coordinates> for Coordinates {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for DailyWeatherForecast {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.day.into_into_dart().into_dart(),
            self.min_temperature.into_into_dart().into_dart(),
            self.max_temperature.into_into_dart().into_dart(),
            self.morning_temperature.into_into_dart().into_dart(),
            self.day_temperature.into_into_dart().into_dart(),
            self.evening_temperature.into_into_dart().into_dart(),
            self.night_temperature.into_into_dart().into_dart(),
            self.condition.into_into_dart().into_dart(),
            self.precipitation_amount.into_into_dart().into_dart(),
            self.precipitation_probability.into_into_dart().into_dart(),
            self.wind_speed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DailyWeatherForecast {}
impl rust2dart::IntoIntoDart<DailyWeatherForecast> for DailyWeatherForecast {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for HourlyWeatherForecast {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.time.into_into_dart().into_dart(),
            self.temperature.into_into_dart().into_dart(),
            self.wind_speed.into_into_dart().into_dart(),
            self.precipitation_amount.into_into_dart().into_dart(),
            self.precipitation_probability.into_into_dart().into_dart(),
            self.condition.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for HourlyWeatherForecast {}
impl rust2dart::IntoIntoDart<HourlyWeatherForecast> for HourlyWeatherForecast {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Location {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.coordinates.into_into_dart().into_dart(),
            self.city.into_into_dart().into_dart(),
            self.country.into_into_dart().into_dart(),
            self.forecast.into_dart(),
            self.attachments.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Location {}
impl rust2dart::IntoIntoDart<Location> for Location {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LocationEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.name.into_into_dart().into_dart(),
            self.coordinates.into_into_dart().into_dart(),
            self.country.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LocationEntry {}
impl rust2dart::IntoIntoDart<LocationEntry> for LocationEntry {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PackingListEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.conditions.into_into_dart().into_dart(),
            self.quantity.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PackingListEntry {}
impl rust2dart::IntoIntoDart<PackingListEntry> for PackingListEntry {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PackingListEntryCondition {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::MinTripDuration { length } => {
                vec![0.into_dart(), length.into_into_dart().into_dart()]
            }
            Self::MaxTripDuration { length } => {
                vec![1.into_dart(), length.into_into_dart().into_dart()]
            }
            Self::MinTemperature { temperature } => {
                vec![2.into_dart(), temperature.into_into_dart().into_dart()]
            }
            Self::MaxTemperature { temperature } => {
                vec![3.into_dart(), temperature.into_into_dart().into_dart()]
            }
            Self::Weather {
                condition,
                min_probability,
            } => vec![
                4.into_dart(),
                condition.into_into_dart().into_dart(),
                min_probability.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PackingListEntryCondition {}
impl rust2dart::IntoIntoDart<PackingListEntryCondition> for PackingListEntryCondition {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Quantity {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.per_day.into_dart(),
            self.per_night.into_dart(),
            self.fixed.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Quantity {}
impl rust2dart::IntoIntoDart<Quantity> for Quantity {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Trip {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.start_date.into_into_dart().into_dart(),
            self.end_date.into_into_dart().into_dart(),
            self.locations.into_into_dart().into_dart(),
            self.header_image.into_dart(),
            self.attachments.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Trip {}
impl rust2dart::IntoIntoDart<Trip> for Trip {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TripAttachment {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TripAttachment {}
impl rust2dart::IntoIntoDart<TripAttachment> for TripAttachment {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TripPackingListEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.packing_list_entry.into_into_dart().into_dart(),
            self.is_packed.into_into_dart().into_dart(),
            self.explicit_hidden.into_into_dart().into_dart(),
            self.explicit_shown.into_into_dart().into_dart(),
            self.quantity.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TripPackingListEntry {}
impl rust2dart::IntoIntoDart<TripPackingListEntry> for TripPackingListEntry {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TripPackingListModel {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.visible.into_into_dart().into_dart(),
            self.hidden.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TripPackingListModel {}
impl rust2dart::IntoIntoDart<TripPackingListModel> for TripPackingListModel {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for WeatherCondition {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Thunderstorm => 0,
            Self::Sunny => 1,
            Self::Rain => 2,
            Self::Clouds => 3,
            Self::Snow => 4,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WeatherCondition {}
impl rust2dart::IntoIntoDart<WeatherCondition> for WeatherCondition {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for WeatherForecast {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.coordinates.into_into_dart().into_dart(),
            self.hourly_forecast.into_into_dart().into_dart(),
            self.daily_forecast.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WeatherForecast {}
impl rust2dart::IntoIntoDart<WeatherForecast> for WeatherForecast {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
