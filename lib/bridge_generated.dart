// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> init({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init",
        argNames: [],
      );

  Future<List<Trip>> getTrips({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_trips(port_),
      parseSuccessData: _wire2api_list_trip,
      constMeta: kGetTripsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTripsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_trips",
        argNames: [],
      );

  Future<Trip> createTrip({required CreateTrip command, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_create_trip(command);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_trip(port_, arg0),
      parseSuccessData: _wire2api_trip,
      constMeta: kCreateTripConstMeta,
      argValues: [command],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateTripConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_trip",
        argNames: ["command"],
      );

  Future<List<PackingListEntry>> getPackingList({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_packing_list(port_),
      parseSuccessData: _wire2api_list_packing_list_entry,
      constMeta: kGetPackingListConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetPackingListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_packing_list",
        argNames: [],
      );

  Future<PackingListEntry> addPackingListEntry(
      {required AddPackingListEntry command, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_add_packing_list_entry(command);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_packing_list_entry(port_, arg0),
      parseSuccessData: _wire2api_packing_list_entry,
      constMeta: kAddPackingListEntryConstMeta,
      argValues: [command],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddPackingListEntryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_packing_list_entry",
        argNames: ["command"],
      );

  Future<void> deletePackingListEntry(
      {required DeletePackingListEntry command, dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_delete_packing_list_entry(command);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_delete_packing_list_entry(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kDeletePackingListEntryConstMeta,
      argValues: [command],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeletePackingListEntryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_packing_list_entry",
        argNames: ["command"],
      );

  Future<TripPackingListModel> getTripPackingList(
      {required UuidValue tripId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(tripId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_trip_packing_list(port_, arg0),
      parseSuccessData: _wire2api_trip_packing_list_model,
      constMeta: kGetTripPackingListConstMeta,
      argValues: [tripId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTripPackingListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_trip_packing_list",
        argNames: ["tripId"],
      );

  Future<void> markAsPacked(
      {required UuidValue tripId, required UuidValue entryId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(tripId);
    var arg1 = _platform.api2wire_Uuid(entryId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mark_as_packed(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMarkAsPackedConstMeta,
      argValues: [tripId, entryId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMarkAsPackedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mark_as_packed",
        argNames: ["tripId", "entryId"],
      );

  Future<void> markAsUnpacked(
      {required UuidValue tripId, required UuidValue entryId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(tripId);
    var arg1 = _platform.api2wire_Uuid(entryId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mark_as_unpacked(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMarkAsUnpackedConstMeta,
      argValues: [tripId, entryId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMarkAsUnpackedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mark_as_unpacked",
        argNames: ["tripId", "entryId"],
      );

  Future<List<LocationEntry>> searchLocations(
      {required String query, dynamic hint}) {
    var arg0 = _platform.api2wire_String(query);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_search_locations(port_, arg0),
      parseSuccessData: _wire2api_list_location_entry,
      constMeta: kSearchLocationsConstMeta,
      argValues: [query],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSearchLocationsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "search_locations",
        argNames: ["query"],
      );

  Future<void> addTripLocation(
      {required AddTripLocation command, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_add_trip_location(command);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_trip_location(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kAddTripLocationConstMeta,
      argValues: [command],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddTripLocationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_trip_location",
        argNames: ["command"],
      );

  Future<void> runBackgroundJobs({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_background_jobs(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kRunBackgroundJobsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunBackgroundJobsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_background_jobs",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  DateTime _wire2api_Chrono_Utc(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  UuidValue _wire2api_Uuid(dynamic raw) {
    return UuidValue.fromByteList(_wire2api_uint_8_list(raw));
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_box_autoadd_usize(dynamic raw) {
    return _wire2api_usize(raw);
  }

  WeatherForecast _wire2api_box_autoadd_weather_forecast(dynamic raw) {
    return _wire2api_weather_forecast(raw);
  }

  Coordinates _wire2api_coordinates(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Coordinates(
      latitude: _wire2api_f64(arr[0]),
      longitude: _wire2api_f64(arr[1]),
    );
  }

  DailyWeatherForecast _wire2api_daily_weather_forecast(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return DailyWeatherForecast(
      day: _wire2api_Chrono_Utc(arr[0]),
      minTemperature: _wire2api_f64(arr[1]),
      maxTemperature: _wire2api_f64(arr[2]),
      morningTemperature: _wire2api_f64(arr[3]),
      dayTemperature: _wire2api_f64(arr[4]),
      eveningTemperature: _wire2api_f64(arr[5]),
      nightTemperature: _wire2api_f64(arr[6]),
      condition: _wire2api_weather_condition(arr[7]),
      precipitationAmount: _wire2api_f64(arr[8]),
      precipitationProbability: _wire2api_f64(arr[9]),
      windSpeed: _wire2api_f64(arr[10]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  HourlyWeatherForecast _wire2api_hourly_weather_forecast(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return HourlyWeatherForecast(
      time: _wire2api_Chrono_Utc(arr[0]),
      temperature: _wire2api_f64(arr[1]),
      windSpeed: _wire2api_f64(arr[2]),
      precipitationAmount: _wire2api_f64(arr[3]),
      precipitationProbability: _wire2api_f64(arr[4]),
      condition: _wire2api_weather_condition(arr[5]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<DailyWeatherForecast> _wire2api_list_daily_weather_forecast(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_daily_weather_forecast)
        .toList();
  }

  List<HourlyWeatherForecast> _wire2api_list_hourly_weather_forecast(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_hourly_weather_forecast)
        .toList();
  }

  List<Location> _wire2api_list_location(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_location).toList();
  }

  List<LocationEntry> _wire2api_list_location_entry(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_location_entry).toList();
  }

  List<PackingListEntry> _wire2api_list_packing_list_entry(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_packing_list_entry).toList();
  }

  List<PackingListEntryCondition> _wire2api_list_packing_list_entry_condition(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_packing_list_entry_condition)
        .toList();
  }

  List<Trip> _wire2api_list_trip(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_trip).toList();
  }

  List<TripAttachment> _wire2api_list_trip_attachment(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_trip_attachment).toList();
  }

  List<TripPackingListEntry> _wire2api_list_trip_packing_list_entry(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_trip_packing_list_entry)
        .toList();
  }

  Location _wire2api_location(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Location(
      coordinates: _wire2api_coordinates(arr[0]),
      city: _wire2api_String(arr[1]),
      country: _wire2api_String(arr[2]),
      forecast: _wire2api_opt_box_autoadd_weather_forecast(arr[3]),
      attachments: _wire2api_list_trip_attachment(arr[4]),
    );
  }

  LocationEntry _wire2api_location_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocationEntry(
      name: _wire2api_String(arr[0]),
      coordinates: _wire2api_coordinates(arr[1]),
      country: _wire2api_String(arr[2]),
    );
  }

  int? _wire2api_opt_box_autoadd_usize(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_usize(raw);
  }

  WeatherForecast? _wire2api_opt_box_autoadd_weather_forecast(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_weather_forecast(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  PackingListEntry _wire2api_packing_list_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PackingListEntry(
      id: _wire2api_Uuid(arr[0]),
      name: _wire2api_String(arr[1]),
      conditions: _wire2api_list_packing_list_entry_condition(arr[2]),
      quantity: _wire2api_quantity(arr[3]),
    );
  }

  PackingListEntryCondition _wire2api_packing_list_entry_condition(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return PackingListEntryCondition_MinTripDuration(
          length: _wire2api_usize(raw[1]),
        );
      case 1:
        return PackingListEntryCondition_MaxTripDuration(
          length: _wire2api_usize(raw[1]),
        );
      case 2:
        return PackingListEntryCondition_MinTemperature(
          temperature: _wire2api_f64(raw[1]),
        );
      case 3:
        return PackingListEntryCondition_MaxTemperature(
          temperature: _wire2api_f64(raw[1]),
        );
      case 4:
        return PackingListEntryCondition_Weather(
          condition: _wire2api_weather_condition(raw[1]),
          minProbability: _wire2api_f64(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Quantity _wire2api_quantity(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Quantity(
      perDay: _wire2api_opt_box_autoadd_usize(arr[0]),
      perNight: _wire2api_opt_box_autoadd_usize(arr[1]),
      fixed: _wire2api_opt_box_autoadd_usize(arr[2]),
    );
  }

  Trip _wire2api_trip(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Trip(
      id: _wire2api_Uuid(arr[0]),
      name: _wire2api_String(arr[1]),
      startDate: _wire2api_Chrono_Utc(arr[2]),
      endDate: _wire2api_Chrono_Utc(arr[3]),
      locations: _wire2api_list_location(arr[4]),
      headerImage: _wire2api_opt_uint_8_list(arr[5]),
      attachments: _wire2api_list_trip_attachment(arr[6]),
    );
  }

  TripAttachment _wire2api_trip_attachment(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TripAttachment(
      id: _wire2api_Uuid(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  TripPackingListEntry _wire2api_trip_packing_list_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TripPackingListEntry(
      packingListEntry: _wire2api_packing_list_entry(arr[0]),
      isPacked: _wire2api_bool(arr[1]),
      explicitHidden: _wire2api_bool(arr[2]),
      explicitShown: _wire2api_bool(arr[3]),
      quantity: _wire2api_opt_box_autoadd_usize(arr[4]),
    );
  }

  TripPackingListModel _wire2api_trip_packing_list_model(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TripPackingListModel(
      visible: _wire2api_list_trip_packing_list_entry(arr[0]),
      hidden: _wire2api_list_trip_packing_list_entry(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  WeatherCondition _wire2api_weather_condition(dynamic raw) {
    return WeatherCondition.values[raw as int];
  }

  WeatherForecast _wire2api_weather_forecast(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WeatherForecast(
      coordinates: _wire2api_coordinates(arr[0]),
      hourlyForecast: _wire2api_list_hourly_weather_forecast(arr[1]),
      dailyForecast: _wire2api_list_daily_weather_forecast(arr[2]),
    );
  }
}

// Section: api2wire

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

@protected
int api2wire_weather_condition(WeatherCondition raw) {
  return api2wire_i32(raw.index);
}
// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  int api2wire_Chrono_Utc(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  ffi.Pointer<wire_AddPackingListEntry>
      api2wire_box_autoadd_add_packing_list_entry(AddPackingListEntry raw) {
    final ptr = inner.new_box_autoadd_add_packing_list_entry_0();
    _api_fill_to_wire_add_packing_list_entry(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_AddTripLocation> api2wire_box_autoadd_add_trip_location(
      AddTripLocation raw) {
    final ptr = inner.new_box_autoadd_add_trip_location_0();
    _api_fill_to_wire_add_trip_location(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_CreateTrip> api2wire_box_autoadd_create_trip(
      CreateTrip raw) {
    final ptr = inner.new_box_autoadd_create_trip_0();
    _api_fill_to_wire_create_trip(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DeletePackingListEntry>
      api2wire_box_autoadd_delete_packing_list_entry(
          DeletePackingListEntry raw) {
    final ptr = inner.new_box_autoadd_delete_packing_list_entry_0();
    _api_fill_to_wire_delete_packing_list_entry(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_box_autoadd_usize(int raw) {
    return inner.new_box_autoadd_usize_0(api2wire_usize(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_list_packing_list_entry_condition>
      api2wire_list_packing_list_entry_condition(
          List<PackingListEntryCondition> raw) {
    final ans = inner.new_list_packing_list_entry_condition_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_packing_list_entry_condition(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_opt_box_autoadd_usize(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_usize(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_8_list(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_add_packing_list_entry(
      AddPackingListEntry apiObj, wire_AddPackingListEntry wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.conditions =
        api2wire_list_packing_list_entry_condition(apiObj.conditions);
    _api_fill_to_wire_quantity(apiObj.quantity, wireObj.quantity);
  }

  void _api_fill_to_wire_add_trip_location(
      AddTripLocation apiObj, wire_AddTripLocation wireObj) {
    wireObj.trip_id = api2wire_Uuid(apiObj.tripId);
    _api_fill_to_wire_location_entry(apiObj.location, wireObj.location);
  }

  void _api_fill_to_wire_box_autoadd_add_packing_list_entry(
      AddPackingListEntry apiObj,
      ffi.Pointer<wire_AddPackingListEntry> wireObj) {
    _api_fill_to_wire_add_packing_list_entry(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_add_trip_location(
      AddTripLocation apiObj, ffi.Pointer<wire_AddTripLocation> wireObj) {
    _api_fill_to_wire_add_trip_location(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_create_trip(
      CreateTrip apiObj, ffi.Pointer<wire_CreateTrip> wireObj) {
    _api_fill_to_wire_create_trip(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_delete_packing_list_entry(
      DeletePackingListEntry apiObj,
      ffi.Pointer<wire_DeletePackingListEntry> wireObj) {
    _api_fill_to_wire_delete_packing_list_entry(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_coordinates(
      Coordinates apiObj, wire_Coordinates wireObj) {
    wireObj.latitude = api2wire_f64(apiObj.latitude);
    wireObj.longitude = api2wire_f64(apiObj.longitude);
  }

  void _api_fill_to_wire_create_trip(
      CreateTrip apiObj, wire_CreateTrip wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.start_date = api2wire_Chrono_Utc(apiObj.startDate);
    wireObj.end_date = api2wire_Chrono_Utc(apiObj.endDate);
    wireObj.header_image = api2wire_opt_uint_8_list(apiObj.headerImage);
  }

  void _api_fill_to_wire_delete_packing_list_entry(
      DeletePackingListEntry apiObj, wire_DeletePackingListEntry wireObj) {
    wireObj.id = api2wire_Uuid(apiObj.id);
  }

  void _api_fill_to_wire_location_entry(
      LocationEntry apiObj, wire_LocationEntry wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    _api_fill_to_wire_coordinates(apiObj.coordinates, wireObj.coordinates);
    wireObj.country = api2wire_String(apiObj.country);
  }

  void _api_fill_to_wire_packing_list_entry_condition(
      PackingListEntryCondition apiObj,
      wire_PackingListEntryCondition wireObj) {
    if (apiObj is PackingListEntryCondition_MinTripDuration) {
      var pre_length = api2wire_usize(apiObj.length);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_PackingListEntryCondition_MinTripDuration();
      wireObj.kind.ref.MinTripDuration.ref.length = pre_length;
      return;
    }
    if (apiObj is PackingListEntryCondition_MaxTripDuration) {
      var pre_length = api2wire_usize(apiObj.length);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_PackingListEntryCondition_MaxTripDuration();
      wireObj.kind.ref.MaxTripDuration.ref.length = pre_length;
      return;
    }
    if (apiObj is PackingListEntryCondition_MinTemperature) {
      var pre_temperature = api2wire_f64(apiObj.temperature);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_PackingListEntryCondition_MinTemperature();
      wireObj.kind.ref.MinTemperature.ref.temperature = pre_temperature;
      return;
    }
    if (apiObj is PackingListEntryCondition_MaxTemperature) {
      var pre_temperature = api2wire_f64(apiObj.temperature);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_PackingListEntryCondition_MaxTemperature();
      wireObj.kind.ref.MaxTemperature.ref.temperature = pre_temperature;
      return;
    }
    if (apiObj is PackingListEntryCondition_Weather) {
      var pre_condition = api2wire_weather_condition(apiObj.condition);
      var pre_min_probability = api2wire_f64(apiObj.minProbability);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_PackingListEntryCondition_Weather();
      wireObj.kind.ref.Weather.ref.condition = pre_condition;
      wireObj.kind.ref.Weather.ref.min_probability = pre_min_probability;
      return;
    }
  }

  void _api_fill_to_wire_quantity(Quantity apiObj, wire_Quantity wireObj) {
    wireObj.per_day = api2wire_opt_box_autoadd_usize(apiObj.perDay);
    wireObj.per_night = api2wire_opt_box_autoadd_usize(apiObj.perNight);
    wireObj.fixed = api2wire_opt_box_autoadd_usize(apiObj.fixed);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init(
    int port_,
  ) {
    return _wire_init(
      port_,
    );
  }

  late final _wire_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init');
  late final _wire_init = _wire_initPtr.asFunction<void Function(int)>();

  void wire_get_trips(
    int port_,
  ) {
    return _wire_get_trips(
      port_,
    );
  }

  late final _wire_get_tripsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_trips');
  late final _wire_get_trips =
      _wire_get_tripsPtr.asFunction<void Function(int)>();

  void wire_create_trip(
    int port_,
    ffi.Pointer<wire_CreateTrip> command,
  ) {
    return _wire_create_trip(
      port_,
      command,
    );
  }

  late final _wire_create_tripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_CreateTrip>)>>('wire_create_trip');
  late final _wire_create_trip = _wire_create_tripPtr
      .asFunction<void Function(int, ffi.Pointer<wire_CreateTrip>)>();

  void wire_get_packing_list(
    int port_,
  ) {
    return _wire_get_packing_list(
      port_,
    );
  }

  late final _wire_get_packing_listPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_packing_list');
  late final _wire_get_packing_list =
      _wire_get_packing_listPtr.asFunction<void Function(int)>();

  void wire_add_packing_list_entry(
    int port_,
    ffi.Pointer<wire_AddPackingListEntry> command,
  ) {
    return _wire_add_packing_list_entry(
      port_,
      command,
    );
  }

  late final _wire_add_packing_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_AddPackingListEntry>)>>(
      'wire_add_packing_list_entry');
  late final _wire_add_packing_list_entry = _wire_add_packing_list_entryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_AddPackingListEntry>)>();

  void wire_delete_packing_list_entry(
    int port_,
    ffi.Pointer<wire_DeletePackingListEntry> command,
  ) {
    return _wire_delete_packing_list_entry(
      port_,
      command,
    );
  }

  late final _wire_delete_packing_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_DeletePackingListEntry>)>>(
      'wire_delete_packing_list_entry');
  late final _wire_delete_packing_list_entry =
      _wire_delete_packing_list_entryPtr.asFunction<
          void Function(int, ffi.Pointer<wire_DeletePackingListEntry>)>();

  void wire_get_trip_packing_list(
    int port_,
    ffi.Pointer<wire_uint_8_list> trip_id,
  ) {
    return _wire_get_trip_packing_list(
      port_,
      trip_id,
    );
  }

  late final _wire_get_trip_packing_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_trip_packing_list');
  late final _wire_get_trip_packing_list = _wire_get_trip_packing_listPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mark_as_packed(
    int port_,
    ffi.Pointer<wire_uint_8_list> trip_id,
    ffi.Pointer<wire_uint_8_list> entry_id,
  ) {
    return _wire_mark_as_packed(
      port_,
      trip_id,
      entry_id,
    );
  }

  late final _wire_mark_as_packedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_mark_as_packed');
  late final _wire_mark_as_packed = _wire_mark_as_packedPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mark_as_unpacked(
    int port_,
    ffi.Pointer<wire_uint_8_list> trip_id,
    ffi.Pointer<wire_uint_8_list> entry_id,
  ) {
    return _wire_mark_as_unpacked(
      port_,
      trip_id,
      entry_id,
    );
  }

  late final _wire_mark_as_unpackedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_mark_as_unpacked');
  late final _wire_mark_as_unpacked = _wire_mark_as_unpackedPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_search_locations(
    int port_,
    ffi.Pointer<wire_uint_8_list> query,
  ) {
    return _wire_search_locations(
      port_,
      query,
    );
  }

  late final _wire_search_locationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_search_locations');
  late final _wire_search_locations = _wire_search_locationsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_trip_location(
    int port_,
    ffi.Pointer<wire_AddTripLocation> command,
  ) {
    return _wire_add_trip_location(
      port_,
      command,
    );
  }

  late final _wire_add_trip_locationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_AddTripLocation>)>>('wire_add_trip_location');
  late final _wire_add_trip_location = _wire_add_trip_locationPtr
      .asFunction<void Function(int, ffi.Pointer<wire_AddTripLocation>)>();

  void wire_run_background_jobs(
    int port_,
  ) {
    return _wire_run_background_jobs(
      port_,
    );
  }

  late final _wire_run_background_jobsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_run_background_jobs');
  late final _wire_run_background_jobs =
      _wire_run_background_jobsPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_AddPackingListEntry>
      new_box_autoadd_add_packing_list_entry_0() {
    return _new_box_autoadd_add_packing_list_entry_0();
  }

  late final _new_box_autoadd_add_packing_list_entry_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_AddPackingListEntry> Function()>>(
      'new_box_autoadd_add_packing_list_entry_0');
  late final _new_box_autoadd_add_packing_list_entry_0 =
      _new_box_autoadd_add_packing_list_entry_0Ptr
          .asFunction<ffi.Pointer<wire_AddPackingListEntry> Function()>();

  ffi.Pointer<wire_AddTripLocation> new_box_autoadd_add_trip_location_0() {
    return _new_box_autoadd_add_trip_location_0();
  }

  late final _new_box_autoadd_add_trip_location_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_AddTripLocation> Function()>>(
          'new_box_autoadd_add_trip_location_0');
  late final _new_box_autoadd_add_trip_location_0 =
      _new_box_autoadd_add_trip_location_0Ptr
          .asFunction<ffi.Pointer<wire_AddTripLocation> Function()>();

  ffi.Pointer<wire_CreateTrip> new_box_autoadd_create_trip_0() {
    return _new_box_autoadd_create_trip_0();
  }

  late final _new_box_autoadd_create_trip_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CreateTrip> Function()>>(
          'new_box_autoadd_create_trip_0');
  late final _new_box_autoadd_create_trip_0 = _new_box_autoadd_create_trip_0Ptr
      .asFunction<ffi.Pointer<wire_CreateTrip> Function()>();

  ffi.Pointer<wire_DeletePackingListEntry>
      new_box_autoadd_delete_packing_list_entry_0() {
    return _new_box_autoadd_delete_packing_list_entry_0();
  }

  late final _new_box_autoadd_delete_packing_list_entry_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_DeletePackingListEntry> Function()>>(
      'new_box_autoadd_delete_packing_list_entry_0');
  late final _new_box_autoadd_delete_packing_list_entry_0 =
      _new_box_autoadd_delete_packing_list_entry_0Ptr
          .asFunction<ffi.Pointer<wire_DeletePackingListEntry> Function()>();

  ffi.Pointer<ffi.UintPtr> new_box_autoadd_usize_0(
    int value,
  ) {
    return _new_box_autoadd_usize_0(
      value,
    );
  }

  late final _new_box_autoadd_usize_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'new_box_autoadd_usize_0');
  late final _new_box_autoadd_usize_0 = _new_box_autoadd_usize_0Ptr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_list_packing_list_entry_condition>
      new_list_packing_list_entry_condition_0(
    int len,
  ) {
    return _new_list_packing_list_entry_condition_0(
      len,
    );
  }

  late final _new_list_packing_list_entry_condition_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_packing_list_entry_condition> Function(
              ffi.Int32)>>('new_list_packing_list_entry_condition_0');
  late final _new_list_packing_list_entry_condition_0 =
      _new_list_packing_list_entry_condition_0Ptr.asFunction<
          ffi.Pointer<wire_list_packing_list_entry_condition> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<PackingListEntryConditionKind>
      inflate_PackingListEntryCondition_MinTripDuration() {
    return _inflate_PackingListEntryCondition_MinTripDuration();
  }

  late final _inflate_PackingListEntryCondition_MinTripDurationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PackingListEntryConditionKind>
              Function()>>('inflate_PackingListEntryCondition_MinTripDuration');
  late final _inflate_PackingListEntryCondition_MinTripDuration =
      _inflate_PackingListEntryCondition_MinTripDurationPtr
          .asFunction<ffi.Pointer<PackingListEntryConditionKind> Function()>();

  ffi.Pointer<PackingListEntryConditionKind>
      inflate_PackingListEntryCondition_MaxTripDuration() {
    return _inflate_PackingListEntryCondition_MaxTripDuration();
  }

  late final _inflate_PackingListEntryCondition_MaxTripDurationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PackingListEntryConditionKind>
              Function()>>('inflate_PackingListEntryCondition_MaxTripDuration');
  late final _inflate_PackingListEntryCondition_MaxTripDuration =
      _inflate_PackingListEntryCondition_MaxTripDurationPtr
          .asFunction<ffi.Pointer<PackingListEntryConditionKind> Function()>();

  ffi.Pointer<PackingListEntryConditionKind>
      inflate_PackingListEntryCondition_MinTemperature() {
    return _inflate_PackingListEntryCondition_MinTemperature();
  }

  late final _inflate_PackingListEntryCondition_MinTemperaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PackingListEntryConditionKind>
              Function()>>('inflate_PackingListEntryCondition_MinTemperature');
  late final _inflate_PackingListEntryCondition_MinTemperature =
      _inflate_PackingListEntryCondition_MinTemperaturePtr
          .asFunction<ffi.Pointer<PackingListEntryConditionKind> Function()>();

  ffi.Pointer<PackingListEntryConditionKind>
      inflate_PackingListEntryCondition_MaxTemperature() {
    return _inflate_PackingListEntryCondition_MaxTemperature();
  }

  late final _inflate_PackingListEntryCondition_MaxTemperaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PackingListEntryConditionKind>
              Function()>>('inflate_PackingListEntryCondition_MaxTemperature');
  late final _inflate_PackingListEntryCondition_MaxTemperature =
      _inflate_PackingListEntryCondition_MaxTemperaturePtr
          .asFunction<ffi.Pointer<PackingListEntryConditionKind> Function()>();

  ffi.Pointer<PackingListEntryConditionKind>
      inflate_PackingListEntryCondition_Weather() {
    return _inflate_PackingListEntryCondition_Weather();
  }

  late final _inflate_PackingListEntryCondition_WeatherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PackingListEntryConditionKind>
              Function()>>('inflate_PackingListEntryCondition_Weather');
  late final _inflate_PackingListEntryCondition_Weather =
      _inflate_PackingListEntryCondition_WeatherPtr
          .asFunction<ffi.Pointer<PackingListEntryConditionKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_CreateTrip extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  @ffi.Int64()
  external int start_date;

  @ffi.Int64()
  external int end_date;

  external ffi.Pointer<wire_uint_8_list> header_image;
}

final class wire_PackingListEntryCondition_MinTripDuration extends ffi.Struct {
  @ffi.UintPtr()
  external int length;
}

final class wire_PackingListEntryCondition_MaxTripDuration extends ffi.Struct {
  @ffi.UintPtr()
  external int length;
}

final class wire_PackingListEntryCondition_MinTemperature extends ffi.Struct {
  @ffi.Double()
  external double temperature;
}

final class wire_PackingListEntryCondition_MaxTemperature extends ffi.Struct {
  @ffi.Double()
  external double temperature;
}

final class wire_PackingListEntryCondition_Weather extends ffi.Struct {
  @ffi.Int32()
  external int condition;

  @ffi.Double()
  external double min_probability;
}

final class PackingListEntryConditionKind extends ffi.Union {
  external ffi.Pointer<wire_PackingListEntryCondition_MinTripDuration>
      MinTripDuration;

  external ffi.Pointer<wire_PackingListEntryCondition_MaxTripDuration>
      MaxTripDuration;

  external ffi.Pointer<wire_PackingListEntryCondition_MinTemperature>
      MinTemperature;

  external ffi.Pointer<wire_PackingListEntryCondition_MaxTemperature>
      MaxTemperature;

  external ffi.Pointer<wire_PackingListEntryCondition_Weather> Weather;
}

final class wire_PackingListEntryCondition extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<PackingListEntryConditionKind> kind;
}

final class wire_list_packing_list_entry_condition extends ffi.Struct {
  external ffi.Pointer<wire_PackingListEntryCondition> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Quantity extends ffi.Struct {
  external ffi.Pointer<ffi.UintPtr> per_day;

  external ffi.Pointer<ffi.UintPtr> per_night;

  external ffi.Pointer<ffi.UintPtr> fixed;
}

final class wire_AddPackingListEntry extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_list_packing_list_entry_condition> conditions;

  external wire_Quantity quantity;
}

final class wire_DeletePackingListEntry extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;
}

final class wire_Coordinates extends ffi.Struct {
  @ffi.Double()
  external double latitude;

  @ffi.Double()
  external double longitude;
}

final class wire_LocationEntry extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external wire_Coordinates coordinates;

  external ffi.Pointer<wire_uint_8_list> country;
}

final class wire_AddTripLocation extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> trip_id;

  external wire_LocationEntry location;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
