// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'api/accommodations.dart';
import 'api/attachments.dart';
import 'api/bookings.dart';
import 'api/packing_list.dart';
import 'api/points_of_interest.dart';
import 'api/timeline.dart';
import 'api/trips.dart';
import 'commands/add_car_rental.dart';
import 'commands/add_packing_list_entry.dart';
import 'commands/add_reservation.dart';
import 'commands/add_trip_accommodation.dart';
import 'commands/add_trip_attachment.dart';
import 'commands/add_trip_location.dart';
import 'commands/add_trip_point_of_interest.dart';
import 'commands/create_trip.dart';
import 'commands/delete_packing_list_entry.dart';
import 'commands/search_web_images.dart';
import 'commands/update_car_rental.dart';
import 'commands/update_packing_list_entry.dart';
import 'commands/update_reservation.dart';
import 'commands/update_trip.dart';
import 'commands/update_trip_accommodation.dart';
import 'commands/update_trip_point_of_interest.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'models.dart';
import 'models/bookings.dart';
import 'models/timeline.dart';
import 'models/web_images.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -770136419;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_holiday_planner',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiBookingsAddCarRental({required AddCarRental command});

  Future<void> crateApiPackingListAddPackingListEntry(
      {required AddPackingListEntry command});

  Future<void> crateApiBookingsAddReservation(
      {required AddReservation command});

  Future<void> crateApiAccommodationsAddTripAccommodation(
      {required AddTripAccommodation command});

  Future<void> crateApiAttachmentsAddTripAttachment(
      {required AddTripAttachment command});

  Future<void> crateApiTripsAddTripLocation({required AddTripLocation command});

  Future<void> crateApiPointsOfInterestAddTripPointOfInterest(
      {required AddTripPointOfInterest command});

  Future<void> crateApiConnectDb();

  Future<TripOverviewModel> crateApiTripsCreateTrip(
      {required CreateTrip command});

  Future<void> crateApiAccommodationsDeleteAccommodation(
      {required UuidValue accommodationId});

  Future<void> crateApiAttachmentsDeleteAttachment(
      {required UuidValue attachmentId});

  Future<void> crateApiBookingsDeleteCarRental(
      {required UuidValue carRentalId});

  Future<void> crateApiPackingListDeletePackingListEntry(
      {required DeletePackingListEntry command});

  Future<void> crateApiPointsOfInterestDeletePointOfInterest(
      {required UuidValue pointOfInterestId});

  Future<void> crateApiBookingsDeleteReservation(
      {required UuidValue reservationId});

  Future<Uint8List> crateApiTripsDownloadWebImage({required String imageUrl});

  Future<List<PackingListEntry>> crateApiPackingListGetPackingList();

  Future<List<TripListModel>> crateApiTripsGetPastTrips();

  Future<TripOverviewModel> crateApiTripsGetTrip({required UuidValue id});

  Future<List<AccommodationModel>> crateApiAccommodationsGetTripAccommodations(
      {required UuidValue tripId});

  Future<List<AttachmentListModel>> crateApiAttachmentsGetTripAttachments(
      {required UuidValue tripId});

  Future<List<Booking>> crateApiBookingsGetTripBookings(
      {required UuidValue tripId});

  Future<List<TripLocationListModel>> crateApiTripsGetTripLocations(
      {required UuidValue tripId});

  Future<TripPackingListModel> crateApiTripsGetTripPackingList(
      {required UuidValue tripId});

  Future<List<PointOfInterestModel>>
      crateApiPointsOfInterestGetTripPointsOfInterest(
          {required UuidValue tripId});

  Future<TimelineModel> crateApiTimelineGetTripTimeline(
      {required UuidValue tripId});

  Future<List<TripListModel>> crateApiTripsGetTrips();

  Future<List<TripListModel>> crateApiTripsGetUpcomingTrips();

  Future<void> crateApiInitApp();

  Future<void> crateApiTripsMarkAsPacked(
      {required UuidValue tripId, required UuidValue entryId});

  Future<void> crateApiTripsMarkAsUnpacked(
      {required UuidValue tripId, required UuidValue entryId});

  Future<void> crateApiAttachmentsReadAttachment(
      {required UuidValue attachmentId, required String targetPath});

  Future<void> crateApiRunBackgroundJobs();

  Future<List<LocationEntry>> crateApiTripsSearchLocations(
      {required String query});

  Future<List<WebImage>> crateApiTripsSearchWebImages(
      {required SearchWebImages command});

  Future<void> crateApiBookingsUpdateCarRental(
      {required UpdateCarRental command});

  Future<void> crateApiPackingListUpdatePackingListEntry(
      {required UpdatePackingListEntry command});

  Future<void> crateApiBookingsUpdateReservation(
      {required UpdateReservation command});

  Future<TripOverviewModel> crateApiTripsUpdateTrip(
      {required UpdateTrip command});

  Future<void> crateApiAccommodationsUpdateTripAccommodation(
      {required UpdateTripAccommodation command});

  Future<void> crateApiPointsOfInterestUpdateTripPointOfInterest(
      {required UpdateTripPointOfInterest command});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiBookingsAddCarRental({required AddCarRental command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_car_rental(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiBookingsAddCarRentalConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookingsAddCarRentalConstMeta =>
      const TaskConstMeta(
        debugName: "add_car_rental",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiPackingListAddPackingListEntry(
      {required AddPackingListEntry command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_packing_list_entry(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPackingListAddPackingListEntryConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPackingListAddPackingListEntryConstMeta =>
      const TaskConstMeta(
        debugName: "add_packing_list_entry",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiBookingsAddReservation(
      {required AddReservation command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_reservation(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiBookingsAddReservationConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookingsAddReservationConstMeta =>
      const TaskConstMeta(
        debugName: "add_reservation",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiAccommodationsAddTripAccommodation(
      {required AddTripAccommodation command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_trip_accommodation(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccommodationsAddTripAccommodationConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccommodationsAddTripAccommodationConstMeta =>
      const TaskConstMeta(
        debugName: "add_trip_accommodation",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiAttachmentsAddTripAttachment(
      {required AddTripAttachment command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_trip_attachment(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAttachmentsAddTripAttachmentConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAttachmentsAddTripAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "add_trip_attachment",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiTripsAddTripLocation(
      {required AddTripLocation command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_trip_location(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsAddTripLocationConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsAddTripLocationConstMeta =>
      const TaskConstMeta(
        debugName: "add_trip_location",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiPointsOfInterestAddTripPointOfInterest(
      {required AddTripPointOfInterest command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_trip_point_of_interest(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPointsOfInterestAddTripPointOfInterestConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPointsOfInterestAddTripPointOfInterestConstMeta =>
      const TaskConstMeta(
        debugName: "add_trip_point_of_interest",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiConnectDb() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiConnectDbConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConnectDbConstMeta => const TaskConstMeta(
        debugName: "connect_db",
        argNames: [],
      );

  @override
  Future<TripOverviewModel> crateApiTripsCreateTrip(
      {required CreateTrip command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_create_trip(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_trip_overview_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsCreateTripConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsCreateTripConstMeta => const TaskConstMeta(
        debugName: "create_trip",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiAccommodationsDeleteAccommodation(
      {required UuidValue accommodationId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(accommodationId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccommodationsDeleteAccommodationConstMeta,
      argValues: [accommodationId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccommodationsDeleteAccommodationConstMeta =>
      const TaskConstMeta(
        debugName: "delete_accommodation",
        argNames: ["accommodationId"],
      );

  @override
  Future<void> crateApiAttachmentsDeleteAttachment(
      {required UuidValue attachmentId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(attachmentId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAttachmentsDeleteAttachmentConstMeta,
      argValues: [attachmentId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAttachmentsDeleteAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "delete_attachment",
        argNames: ["attachmentId"],
      );

  @override
  Future<void> crateApiBookingsDeleteCarRental(
      {required UuidValue carRentalId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(carRentalId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiBookingsDeleteCarRentalConstMeta,
      argValues: [carRentalId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookingsDeleteCarRentalConstMeta =>
      const TaskConstMeta(
        debugName: "delete_car_rental",
        argNames: ["carRentalId"],
      );

  @override
  Future<void> crateApiPackingListDeletePackingListEntry(
      {required DeletePackingListEntry command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_delete_packing_list_entry(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPackingListDeletePackingListEntryConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPackingListDeletePackingListEntryConstMeta =>
      const TaskConstMeta(
        debugName: "delete_packing_list_entry",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiPointsOfInterestDeletePointOfInterest(
      {required UuidValue pointOfInterestId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(pointOfInterestId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPointsOfInterestDeletePointOfInterestConstMeta,
      argValues: [pointOfInterestId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPointsOfInterestDeletePointOfInterestConstMeta =>
      const TaskConstMeta(
        debugName: "delete_point_of_interest",
        argNames: ["pointOfInterestId"],
      );

  @override
  Future<void> crateApiBookingsDeleteReservation(
      {required UuidValue reservationId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(reservationId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiBookingsDeleteReservationConstMeta,
      argValues: [reservationId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookingsDeleteReservationConstMeta =>
      const TaskConstMeta(
        debugName: "delete_reservation",
        argNames: ["reservationId"],
      );

  @override
  Future<Uint8List> crateApiTripsDownloadWebImage({required String imageUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(imageUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsDownloadWebImageConstMeta,
      argValues: [imageUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsDownloadWebImageConstMeta =>
      const TaskConstMeta(
        debugName: "download_web_image",
        argNames: ["imageUrl"],
      );

  @override
  Future<List<PackingListEntry>> crateApiPackingListGetPackingList() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_packing_list_entry,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPackingListGetPackingListConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPackingListGetPackingListConstMeta =>
      const TaskConstMeta(
        debugName: "get_packing_list",
        argNames: [],
      );

  @override
  Future<List<TripListModel>> crateApiTripsGetPastTrips() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_trip_list_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetPastTripsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetPastTripsConstMeta => const TaskConstMeta(
        debugName: "get_past_trips",
        argNames: [],
      );

  @override
  Future<TripOverviewModel> crateApiTripsGetTrip({required UuidValue id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_trip_overview_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetTripConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetTripConstMeta => const TaskConstMeta(
        debugName: "get_trip",
        argNames: ["id"],
      );

  @override
  Future<List<AccommodationModel>> crateApiAccommodationsGetTripAccommodations(
      {required UuidValue tripId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_accommodation_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccommodationsGetTripAccommodationsConstMeta,
      argValues: [tripId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccommodationsGetTripAccommodationsConstMeta =>
      const TaskConstMeta(
        debugName: "get_trip_accommodations",
        argNames: ["tripId"],
      );

  @override
  Future<List<AttachmentListModel>> crateApiAttachmentsGetTripAttachments(
      {required UuidValue tripId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_attachment_list_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAttachmentsGetTripAttachmentsConstMeta,
      argValues: [tripId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAttachmentsGetTripAttachmentsConstMeta =>
      const TaskConstMeta(
        debugName: "get_trip_attachments",
        argNames: ["tripId"],
      );

  @override
  Future<List<Booking>> crateApiBookingsGetTripBookings(
      {required UuidValue tripId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_booking,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiBookingsGetTripBookingsConstMeta,
      argValues: [tripId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookingsGetTripBookingsConstMeta =>
      const TaskConstMeta(
        debugName: "get_trip_bookings",
        argNames: ["tripId"],
      );

  @override
  Future<List<TripLocationListModel>> crateApiTripsGetTripLocations(
      {required UuidValue tripId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_trip_location_list_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetTripLocationsConstMeta,
      argValues: [tripId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetTripLocationsConstMeta =>
      const TaskConstMeta(
        debugName: "get_trip_locations",
        argNames: ["tripId"],
      );

  @override
  Future<TripPackingListModel> crateApiTripsGetTripPackingList(
      {required UuidValue tripId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_trip_packing_list_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetTripPackingListConstMeta,
      argValues: [tripId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetTripPackingListConstMeta =>
      const TaskConstMeta(
        debugName: "get_trip_packing_list",
        argNames: ["tripId"],
      );

  @override
  Future<List<PointOfInterestModel>>
      crateApiPointsOfInterestGetTripPointsOfInterest(
          {required UuidValue tripId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_point_of_interest_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPointsOfInterestGetTripPointsOfInterestConstMeta,
      argValues: [tripId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPointsOfInterestGetTripPointsOfInterestConstMeta =>
      const TaskConstMeta(
        debugName: "get_trip_points_of_interest",
        argNames: ["tripId"],
      );

  @override
  Future<TimelineModel> crateApiTimelineGetTripTimeline(
      {required UuidValue tripId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_timeline_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTimelineGetTripTimelineConstMeta,
      argValues: [tripId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTimelineGetTripTimelineConstMeta =>
      const TaskConstMeta(
        debugName: "get_trip_timeline",
        argNames: ["tripId"],
      );

  @override
  Future<List<TripListModel>> crateApiTripsGetTrips() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_trip_list_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetTripsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetTripsConstMeta => const TaskConstMeta(
        debugName: "get_trips",
        argNames: [],
      );

  @override
  Future<List<TripListModel>> crateApiTripsGetUpcomingTrips() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_trip_list_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetUpcomingTripsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetUpcomingTripsConstMeta =>
      const TaskConstMeta(
        debugName: "get_upcoming_trips",
        argNames: [],
      );

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiTripsMarkAsPacked(
      {required UuidValue tripId, required UuidValue entryId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        sse_encode_Uuid(entryId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsMarkAsPackedConstMeta,
      argValues: [tripId, entryId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsMarkAsPackedConstMeta => const TaskConstMeta(
        debugName: "mark_as_packed",
        argNames: ["tripId", "entryId"],
      );

  @override
  Future<void> crateApiTripsMarkAsUnpacked(
      {required UuidValue tripId, required UuidValue entryId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        sse_encode_Uuid(entryId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsMarkAsUnpackedConstMeta,
      argValues: [tripId, entryId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsMarkAsUnpackedConstMeta =>
      const TaskConstMeta(
        debugName: "mark_as_unpacked",
        argNames: ["tripId", "entryId"],
      );

  @override
  Future<void> crateApiAttachmentsReadAttachment(
      {required UuidValue attachmentId, required String targetPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(attachmentId, serializer);
        sse_encode_String(targetPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAttachmentsReadAttachmentConstMeta,
      argValues: [attachmentId, targetPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAttachmentsReadAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "read_attachment",
        argNames: ["attachmentId", "targetPath"],
      );

  @override
  Future<void> crateApiRunBackgroundJobs() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRunBackgroundJobsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRunBackgroundJobsConstMeta => const TaskConstMeta(
        debugName: "run_background_jobs",
        argNames: [],
      );

  @override
  Future<List<LocationEntry>> crateApiTripsSearchLocations(
      {required String query}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_location_entry,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsSearchLocationsConstMeta,
      argValues: [query],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsSearchLocationsConstMeta =>
      const TaskConstMeta(
        debugName: "search_locations",
        argNames: ["query"],
      );

  @override
  Future<List<WebImage>> crateApiTripsSearchWebImages(
      {required SearchWebImages command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_search_web_images(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_web_image,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsSearchWebImagesConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsSearchWebImagesConstMeta =>
      const TaskConstMeta(
        debugName: "search_web_images",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiBookingsUpdateCarRental(
      {required UpdateCarRental command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_update_car_rental(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiBookingsUpdateCarRentalConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookingsUpdateCarRentalConstMeta =>
      const TaskConstMeta(
        debugName: "update_car_rental",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiPackingListUpdatePackingListEntry(
      {required UpdatePackingListEntry command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_update_packing_list_entry(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPackingListUpdatePackingListEntryConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPackingListUpdatePackingListEntryConstMeta =>
      const TaskConstMeta(
        debugName: "update_packing_list_entry",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiBookingsUpdateReservation(
      {required UpdateReservation command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_update_reservation(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiBookingsUpdateReservationConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBookingsUpdateReservationConstMeta =>
      const TaskConstMeta(
        debugName: "update_reservation",
        argNames: ["command"],
      );

  @override
  Future<TripOverviewModel> crateApiTripsUpdateTrip(
      {required UpdateTrip command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_update_trip(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_trip_overview_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsUpdateTripConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsUpdateTripConstMeta => const TaskConstMeta(
        debugName: "update_trip",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiAccommodationsUpdateTripAccommodation(
      {required UpdateTripAccommodation command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_update_trip_accommodation(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAccommodationsUpdateTripAccommodationConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAccommodationsUpdateTripAccommodationConstMeta =>
      const TaskConstMeta(
        debugName: "update_trip_accommodation",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiPointsOfInterestUpdateTripPointOfInterest(
      {required UpdateTripPointOfInterest command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_update_trip_point_of_interest(
            command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPointsOfInterestUpdateTripPointOfInterestConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPointsOfInterestUpdateTripPointOfInterestConstMeta =>
          const TaskConstMeta(
            debugName: "update_trip_point_of_interest",
            argNames: ["command"],
          );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  AccommodationModel dco_decode_accommodation_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return AccommodationModel(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      address: dco_decode_opt_String(arr[2]),
      checkIn: dco_decode_Chrono_Utc(arr[3]),
      checkOut: dco_decode_Chrono_Utc(arr[4]),
      attachments: dco_decode_list_trip_attachment(arr[5]),
    );
  }

  @protected
  AccommodationStatus dco_decode_accommodation_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AccommodationStatus(
      accommodationName: dco_decode_String(arr[0]),
      statusType: dco_decode_accommodation_status_type(arr[1]),
      datetime: dco_decode_Chrono_Utc(arr[2]),
    );
  }

  @protected
  AccommodationStatusType dco_decode_accommodation_status_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AccommodationStatusType.values[raw as int];
  }

  @protected
  AddCarRental dco_decode_add_car_rental(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return AddCarRental(
      tripId: dco_decode_Uuid(arr[0]),
      provider: dco_decode_String(arr[1]),
      pickUpDate: dco_decode_Chrono_Utc(arr[2]),
      pickUpLocation: dco_decode_String(arr[3]),
      returnDate: dco_decode_Chrono_Utc(arr[4]),
      returnLocation: dco_decode_opt_String(arr[5]),
      bookingNumber: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  AddPackingListEntry dco_decode_add_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return AddPackingListEntry(
      name: dco_decode_String(arr[0]),
      description: dco_decode_opt_String(arr[1]),
      conditions: dco_decode_list_packing_list_entry_condition(arr[2]),
      quantity: dco_decode_quantity(arr[3]),
      category: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  AddReservation dco_decode_add_reservation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return AddReservation(
      tripId: dco_decode_Uuid(arr[0]),
      title: dco_decode_String(arr[1]),
      address: dco_decode_opt_String(arr[2]),
      startDate: dco_decode_Chrono_Utc(arr[3]),
      endDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[4]),
      link: dco_decode_opt_String(arr[5]),
      bookingNumber: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  AddTripAccommodation dco_decode_add_trip_accommodation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return AddTripAccommodation(
      tripId: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      checkIn: dco_decode_opt_box_autoadd_Chrono_Utc(arr[2]),
      checkOut: dco_decode_opt_box_autoadd_Chrono_Utc(arr[3]),
      address: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  AddTripAttachment dco_decode_add_trip_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AddTripAttachment(
      tripId: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      path: dco_decode_String(arr[2]),
    );
  }

  @protected
  AddTripLocation dco_decode_add_trip_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AddTripLocation(
      tripId: dco_decode_Uuid(arr[0]),
      location: dco_decode_location_entry(arr[1]),
    );
  }

  @protected
  AddTripPointOfInterest dco_decode_add_trip_point_of_interest(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return AddTripPointOfInterest(
      tripId: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      address: dco_decode_String(arr[2]),
      website: dco_decode_opt_String(arr[3]),
      openingHours: dco_decode_opt_String(arr[4]),
      price: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  AttachmentListModel dco_decode_attachment_list_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return AttachmentListModel(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      fileName: dco_decode_String(arr[2]),
      contentType: dco_decode_String(arr[3]),
    );
  }

  @protected
  Booking dco_decode_booking(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Booking_Reservation(
          dco_decode_box_autoadd_reservation(raw[1]),
        );
      case 1:
        return Booking_CarRental(
          dco_decode_box_autoadd_car_rental(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  AccommodationStatus dco_decode_box_autoadd_accommodation_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_accommodation_status(raw);
  }

  @protected
  AddCarRental dco_decode_box_autoadd_add_car_rental(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_car_rental(raw);
  }

  @protected
  AddPackingListEntry dco_decode_box_autoadd_add_packing_list_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_packing_list_entry(raw);
  }

  @protected
  AddReservation dco_decode_box_autoadd_add_reservation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_reservation(raw);
  }

  @protected
  AddTripAccommodation dco_decode_box_autoadd_add_trip_accommodation(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_trip_accommodation(raw);
  }

  @protected
  AddTripAttachment dco_decode_box_autoadd_add_trip_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_trip_attachment(raw);
  }

  @protected
  AddTripLocation dco_decode_box_autoadd_add_trip_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_trip_location(raw);
  }

  @protected
  AddTripPointOfInterest dco_decode_box_autoadd_add_trip_point_of_interest(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_trip_point_of_interest(raw);
  }

  @protected
  CarRental dco_decode_box_autoadd_car_rental(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_car_rental(raw);
  }

  @protected
  CreateTrip dco_decode_box_autoadd_create_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_create_trip(raw);
  }

  @protected
  DeletePackingListEntry dco_decode_box_autoadd_delete_packing_list_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_delete_packing_list_entry(raw);
  }

  @protected
  Reservation dco_decode_box_autoadd_reservation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_reservation(raw);
  }

  @protected
  SearchWebImages dco_decode_box_autoadd_search_web_images(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_search_web_images(raw);
  }

  @protected
  UpdateCarRental dco_decode_box_autoadd_update_car_rental(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_car_rental(raw);
  }

  @protected
  UpdatePackingListEntry dco_decode_box_autoadd_update_packing_list_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_packing_list_entry(raw);
  }

  @protected
  UpdateReservation dco_decode_box_autoadd_update_reservation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_reservation(raw);
  }

  @protected
  UpdateTrip dco_decode_box_autoadd_update_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_trip(raw);
  }

  @protected
  UpdateTripAccommodation dco_decode_box_autoadd_update_trip_accommodation(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_trip_accommodation(raw);
  }

  @protected
  UpdateTripPointOfInterest
      dco_decode_box_autoadd_update_trip_point_of_interest(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_trip_point_of_interest(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  WeatherForecast dco_decode_box_autoadd_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weather_forecast(raw);
  }

  @protected
  CarRental dco_decode_car_rental(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return CarRental(
      id: dco_decode_Uuid(arr[0]),
      provider: dco_decode_String(arr[1]),
      pickUpDate: dco_decode_Chrono_Utc(arr[2]),
      pickUpLocation: dco_decode_String(arr[3]),
      returnDate: dco_decode_Chrono_Utc(arr[4]),
      returnLocation: dco_decode_opt_String(arr[5]),
      bookingNumber: dco_decode_opt_String(arr[6]),
      attachments: dco_decode_list_trip_attachment(arr[7]),
    );
  }

  @protected
  Coordinates dco_decode_coordinates(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Coordinates(
      latitude: dco_decode_f_64(arr[0]),
      longitude: dco_decode_f_64(arr[1]),
    );
  }

  @protected
  CreateTrip dco_decode_create_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return CreateTrip(
      name: dco_decode_String(arr[0]),
      startDate: dco_decode_Chrono_Utc(arr[1]),
      endDate: dco_decode_Chrono_Utc(arr[2]),
      headerImage: dco_decode_opt_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  DailyWeatherForecast dco_decode_daily_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return DailyWeatherForecast(
      day: dco_decode_Chrono_Utc(arr[0]),
      minTemperature: dco_decode_f_64(arr[1]),
      maxTemperature: dco_decode_f_64(arr[2]),
      morningTemperature: dco_decode_f_64(arr[3]),
      dayTemperature: dco_decode_f_64(arr[4]),
      eveningTemperature: dco_decode_f_64(arr[5]),
      nightTemperature: dco_decode_f_64(arr[6]),
      condition: dco_decode_weather_condition(arr[7]),
      precipitationAmount: dco_decode_f_64(arr[8]),
      precipitationProbability: dco_decode_f_64(arr[9]),
      windSpeed: dco_decode_f_64(arr[10]),
    );
  }

  @protected
  DeletePackingListEntry dco_decode_delete_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DeletePackingListEntry(
      id: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  HourlyWeatherForecast dco_decode_hourly_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return HourlyWeatherForecast(
      time: dco_decode_Chrono_Utc(arr[0]),
      temperature: dco_decode_f_64(arr[1]),
      windSpeed: dco_decode_f_64(arr[2]),
      precipitationAmount: dco_decode_f_64(arr[3]),
      precipitationProbability: dco_decode_f_64(arr[4]),
      condition: dco_decode_weather_condition(arr[5]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<AccommodationModel> dco_decode_list_accommodation_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_accommodation_model).toList();
  }

  @protected
  List<AttachmentListModel> dco_decode_list_attachment_list_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_attachment_list_model)
        .toList();
  }

  @protected
  List<Booking> dco_decode_list_booking(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_booking).toList();
  }

  @protected
  List<DailyWeatherForecast> dco_decode_list_daily_weather_forecast(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_daily_weather_forecast)
        .toList();
  }

  @protected
  List<HourlyWeatherForecast> dco_decode_list_hourly_weather_forecast(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_hourly_weather_forecast)
        .toList();
  }

  @protected
  List<LocationEntry> dco_decode_list_location_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_location_entry).toList();
  }

  @protected
  List<PackingListEntry> dco_decode_list_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_packing_list_entry).toList();
  }

  @protected
  List<PackingListEntryCondition> dco_decode_list_packing_list_entry_condition(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_packing_list_entry_condition)
        .toList();
  }

  @protected
  List<PointOfInterestModel> dco_decode_list_point_of_interest_model(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_point_of_interest_model)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<TimelineItem> dco_decode_list_timeline_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_timeline_item).toList();
  }

  @protected
  List<TripAttachment> dco_decode_list_trip_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_trip_attachment).toList();
  }

  @protected
  List<TripListModel> dco_decode_list_trip_list_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_trip_list_model).toList();
  }

  @protected
  List<TripLocationListModel> dco_decode_list_trip_location_list_model(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_trip_location_list_model)
        .toList();
  }

  @protected
  List<TripLocationSummary> dco_decode_list_trip_location_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_trip_location_summary)
        .toList();
  }

  @protected
  List<TripPackingListEntry> dco_decode_list_trip_packing_list_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_trip_packing_list_entry)
        .toList();
  }

  @protected
  List<TripPackingListGroup> dco_decode_list_trip_packing_list_group(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_trip_packing_list_group)
        .toList();
  }

  @protected
  List<WebImage> dco_decode_list_web_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_web_image).toList();
  }

  @protected
  LocationEntry dco_decode_location_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocationEntry(
      name: dco_decode_String(arr[0]),
      coordinates: dco_decode_coordinates(arr[1]),
      country: dco_decode_String(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  AccommodationStatus? dco_decode_opt_box_autoadd_accommodation_status(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_accommodation_status(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  WeatherForecast? dco_decode_opt_box_autoadd_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_weather_forecast(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PackingListEntry dco_decode_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PackingListEntry(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      description: dco_decode_opt_String(arr[2]),
      conditions: dco_decode_list_packing_list_entry_condition(arr[3]),
      quantity: dco_decode_quantity(arr[4]),
      category: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  PackingListEntryCondition dco_decode_packing_list_entry_condition(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PackingListEntryCondition_MinTripDuration(
          length: dco_decode_u_32(raw[1]),
        );
      case 1:
        return PackingListEntryCondition_MaxTripDuration(
          length: dco_decode_u_32(raw[1]),
        );
      case 2:
        return PackingListEntryCondition_MinTemperature(
          temperature: dco_decode_f_64(raw[1]),
        );
      case 3:
        return PackingListEntryCondition_MaxTemperature(
          temperature: dco_decode_f_64(raw[1]),
        );
      case 4:
        return PackingListEntryCondition_Weather(
          condition: dco_decode_weather_condition(raw[1]),
          minProbability: dco_decode_f_64(raw[2]),
        );
      case 5:
        return PackingListEntryCondition_Tag(
          tag: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PointOfInterestModel dco_decode_point_of_interest_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PointOfInterestModel(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      address: dco_decode_String(arr[2]),
      website: dco_decode_opt_String(arr[3]),
      openingHours: dco_decode_opt_String(arr[4]),
      price: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  Quantity dco_decode_quantity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Quantity(
      perDay: dco_decode_opt_box_autoadd_usize(arr[0]),
      perNight: dco_decode_opt_box_autoadd_usize(arr[1]),
      fixed: dco_decode_opt_box_autoadd_usize(arr[2]),
    );
  }

  @protected
  Reservation dco_decode_reservation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Reservation(
      id: dco_decode_Uuid(arr[0]),
      title: dco_decode_String(arr[1]),
      address: dco_decode_opt_String(arr[2]),
      startDate: dco_decode_Chrono_Utc(arr[3]),
      endDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[4]),
      link: dco_decode_opt_String(arr[5]),
      bookingNumber: dco_decode_opt_String(arr[6]),
      attachments: dco_decode_list_trip_attachment(arr[7]),
    );
  }

  @protected
  SearchWebImages dco_decode_search_web_images(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SearchWebImages(
      query: dco_decode_String(arr[0]),
    );
  }

  @protected
  TimelineItem dco_decode_timeline_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TimelineItem(
      date: dco_decode_Chrono_Utc(arr[0]),
      details: dco_decode_timeline_item_details(arr[1]),
    );
  }

  @protected
  TimelineItemDetails dco_decode_timeline_item_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TimelineItemDetails_CarRentalPickUp(
          provider: dco_decode_String(raw[1]),
          address: dco_decode_String(raw[2]),
        );
      case 1:
        return TimelineItemDetails_CarRentalDropOff(
          provider: dco_decode_String(raw[1]),
          address: dco_decode_String(raw[2]),
        );
      case 2:
        return TimelineItemDetails_Reservation(
          title: dco_decode_String(raw[1]),
          address: dco_decode_opt_String(raw[2]),
        );
      case 3:
        return TimelineItemDetails_CheckIn(
          address: dco_decode_opt_String(raw[1]),
        );
      case 4:
        return TimelineItemDetails_CheckOut(
          address: dco_decode_opt_String(raw[1]),
        );
      case 5:
        return TimelineItemDetails_FlightTakeOff(
          airport: dco_decode_String(raw[1]),
          flightNumber: dco_decode_String(raw[2]),
          seat: dco_decode_opt_String(raw[3]),
        );
      case 6:
        return TimelineItemDetails_FlightLanding(
          airport: dco_decode_String(raw[1]),
          flightNumber: dco_decode_String(raw[2]),
        );
      case 7:
        return TimelineItemDetails_TrainOrigin(
          station: dco_decode_String(raw[1]),
          trainNumber: dco_decode_String(raw[2]),
          seat: dco_decode_opt_String(raw[3]),
        );
      case 8:
        return TimelineItemDetails_TrainDestination(
          station: dco_decode_String(raw[1]),
          trainNumber: dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TimelineModel dco_decode_timeline_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TimelineModel(
      past: dco_decode_list_timeline_item(arr[0]),
      future: dco_decode_list_timeline_item(arr[1]),
    );
  }

  @protected
  TripAttachment dco_decode_trip_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TripAttachment(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      fileName: dco_decode_String(arr[2]),
      contentType: dco_decode_String(arr[3]),
    );
  }

  @protected
  TripListModel dco_decode_trip_list_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TripListModel(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      startDate: dco_decode_Chrono_Utc(arr[2]),
      endDate: dco_decode_Chrono_Utc(arr[3]),
      headerImage: dco_decode_opt_list_prim_u_8_strict(arr[4]),
    );
  }

  @protected
  TripLocationListModel dco_decode_trip_location_list_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TripLocationListModel(
      id: dco_decode_Uuid(arr[0]),
      coordinates: dco_decode_coordinates(arr[1]),
      city: dco_decode_String(arr[2]),
      country: dco_decode_String(arr[3]),
      forecast: dco_decode_opt_box_autoadd_weather_forecast(arr[4]),
    );
  }

  @protected
  TripLocationSummary dco_decode_trip_location_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TripLocationSummary(
      city: dco_decode_String(arr[0]),
      country: dco_decode_String(arr[1]),
    );
  }

  @protected
  TripOverviewModel dco_decode_trip_overview_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return TripOverviewModel(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      headerImage: dco_decode_opt_list_prim_u_8_strict(arr[2]),
      pendingPackingListItems: dco_decode_usize(arr[3]),
      packedPackingListItems: dco_decode_usize(arr[4]),
      totalPackingListItems: dco_decode_usize(arr[5]),
      pointsOfInterestCount: dco_decode_usize(arr[6]),
      accommodationStatus:
          dco_decode_opt_box_autoadd_accommodation_status(arr[7]),
      locationsList: dco_decode_list_trip_location_summary(arr[8]),
    );
  }

  @protected
  TripPackingListEntry dco_decode_trip_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TripPackingListEntry(
      packingListEntry: dco_decode_packing_list_entry(arr[0]),
      isPacked: dco_decode_bool(arr[1]),
      quantity: dco_decode_opt_box_autoadd_usize(arr[2]),
    );
  }

  @protected
  TripPackingListGroup dco_decode_trip_packing_list_group(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TripPackingListGroup(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      entries: dco_decode_list_trip_packing_list_entry(arr[2]),
    );
  }

  @protected
  TripPackingListModel dco_decode_trip_packing_list_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TripPackingListModel(
      groups: dco_decode_list_trip_packing_list_group(arr[0]),
      entries: dco_decode_list_trip_packing_list_entry(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UpdateCarRental dco_decode_update_car_rental(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return UpdateCarRental(
      id: dco_decode_Uuid(arr[0]),
      provider: dco_decode_String(arr[1]),
      pickUpDate: dco_decode_Chrono_Utc(arr[2]),
      pickUpLocation: dco_decode_String(arr[3]),
      returnDate: dco_decode_Chrono_Utc(arr[4]),
      returnLocation: dco_decode_opt_String(arr[5]),
      bookingNumber: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  UpdatePackingListEntry dco_decode_update_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return UpdatePackingListEntry(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      description: dco_decode_opt_String(arr[2]),
      conditions: dco_decode_list_packing_list_entry_condition(arr[3]),
      quantity: dco_decode_quantity(arr[4]),
      category: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  UpdateReservation dco_decode_update_reservation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return UpdateReservation(
      id: dco_decode_Uuid(arr[0]),
      title: dco_decode_String(arr[1]),
      address: dco_decode_opt_String(arr[2]),
      startDate: dco_decode_Chrono_Utc(arr[3]),
      endDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[4]),
      link: dco_decode_opt_String(arr[5]),
      bookingNumber: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  UpdateTrip dco_decode_update_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UpdateTrip(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      startDate: dco_decode_Chrono_Utc(arr[2]),
      endDate: dco_decode_Chrono_Utc(arr[3]),
      headerImage: dco_decode_opt_list_prim_u_8_strict(arr[4]),
    );
  }

  @protected
  UpdateTripAccommodation dco_decode_update_trip_accommodation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UpdateTripAccommodation(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      address: dco_decode_opt_String(arr[2]),
      checkIn: dco_decode_Chrono_Utc(arr[3]),
      checkOut: dco_decode_Chrono_Utc(arr[4]),
    );
  }

  @protected
  UpdateTripPointOfInterest dco_decode_update_trip_point_of_interest(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return UpdateTripPointOfInterest(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      address: dco_decode_String(arr[2]),
      website: dco_decode_opt_String(arr[3]),
      openingHours: dco_decode_opt_String(arr[4]),
      price: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WeatherCondition dco_decode_weather_condition(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WeatherCondition.values[raw as int];
  }

  @protected
  WeatherForecast dco_decode_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return WeatherForecast(
      hourlyForecast: dco_decode_list_hourly_weather_forecast(arr[0]),
      dailyForecast: dco_decode_list_daily_weather_forecast(arr[1]),
    );
  }

  @protected
  WebImage dco_decode_web_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return WebImage(
      id: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
      thumbnailUrl: dco_decode_String(arr[2]),
      author: dco_decode_String(arr[3]),
      description: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  AccommodationModel sse_decode_accommodation_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    var var_checkIn = sse_decode_Chrono_Utc(deserializer);
    var var_checkOut = sse_decode_Chrono_Utc(deserializer);
    var var_attachments = sse_decode_list_trip_attachment(deserializer);
    return AccommodationModel(
        id: var_id,
        name: var_name,
        address: var_address,
        checkIn: var_checkIn,
        checkOut: var_checkOut,
        attachments: var_attachments);
  }

  @protected
  AccommodationStatus sse_decode_accommodation_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_accommodationName = sse_decode_String(deserializer);
    var var_statusType = sse_decode_accommodation_status_type(deserializer);
    var var_datetime = sse_decode_Chrono_Utc(deserializer);
    return AccommodationStatus(
        accommodationName: var_accommodationName,
        statusType: var_statusType,
        datetime: var_datetime);
  }

  @protected
  AccommodationStatusType sse_decode_accommodation_status_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return AccommodationStatusType.values[inner];
  }

  @protected
  AddCarRental sse_decode_add_car_rental(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tripId = sse_decode_Uuid(deserializer);
    var var_provider = sse_decode_String(deserializer);
    var var_pickUpDate = sse_decode_Chrono_Utc(deserializer);
    var var_pickUpLocation = sse_decode_String(deserializer);
    var var_returnDate = sse_decode_Chrono_Utc(deserializer);
    var var_returnLocation = sse_decode_opt_String(deserializer);
    var var_bookingNumber = sse_decode_opt_String(deserializer);
    return AddCarRental(
        tripId: var_tripId,
        provider: var_provider,
        pickUpDate: var_pickUpDate,
        pickUpLocation: var_pickUpLocation,
        returnDate: var_returnDate,
        returnLocation: var_returnLocation,
        bookingNumber: var_bookingNumber);
  }

  @protected
  AddPackingListEntry sse_decode_add_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_conditions =
        sse_decode_list_packing_list_entry_condition(deserializer);
    var var_quantity = sse_decode_quantity(deserializer);
    var var_category = sse_decode_opt_String(deserializer);
    return AddPackingListEntry(
        name: var_name,
        description: var_description,
        conditions: var_conditions,
        quantity: var_quantity,
        category: var_category);
  }

  @protected
  AddReservation sse_decode_add_reservation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tripId = sse_decode_Uuid(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    var var_startDate = sse_decode_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_link = sse_decode_opt_String(deserializer);
    var var_bookingNumber = sse_decode_opt_String(deserializer);
    return AddReservation(
        tripId: var_tripId,
        title: var_title,
        address: var_address,
        startDate: var_startDate,
        endDate: var_endDate,
        link: var_link,
        bookingNumber: var_bookingNumber);
  }

  @protected
  AddTripAccommodation sse_decode_add_trip_accommodation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tripId = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_checkIn = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_checkOut = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    return AddTripAccommodation(
        tripId: var_tripId,
        name: var_name,
        checkIn: var_checkIn,
        checkOut: var_checkOut,
        address: var_address);
  }

  @protected
  AddTripAttachment sse_decode_add_trip_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tripId = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_path = sse_decode_String(deserializer);
    return AddTripAttachment(
        tripId: var_tripId, name: var_name, path: var_path);
  }

  @protected
  AddTripLocation sse_decode_add_trip_location(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tripId = sse_decode_Uuid(deserializer);
    var var_location = sse_decode_location_entry(deserializer);
    return AddTripLocation(tripId: var_tripId, location: var_location);
  }

  @protected
  AddTripPointOfInterest sse_decode_add_trip_point_of_interest(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tripId = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_website = sse_decode_opt_String(deserializer);
    var var_openingHours = sse_decode_opt_String(deserializer);
    var var_price = sse_decode_opt_String(deserializer);
    return AddTripPointOfInterest(
        tripId: var_tripId,
        name: var_name,
        address: var_address,
        website: var_website,
        openingHours: var_openingHours,
        price: var_price);
  }

  @protected
  AttachmentListModel sse_decode_attachment_list_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_fileName = sse_decode_String(deserializer);
    var var_contentType = sse_decode_String(deserializer);
    return AttachmentListModel(
        id: var_id,
        name: var_name,
        fileName: var_fileName,
        contentType: var_contentType);
  }

  @protected
  Booking sse_decode_booking(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_reservation(deserializer);
        return Booking_Reservation(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_car_rental(deserializer);
        return Booking_CarRental(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  AccommodationStatus sse_decode_box_autoadd_accommodation_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_accommodation_status(deserializer));
  }

  @protected
  AddCarRental sse_decode_box_autoadd_add_car_rental(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_car_rental(deserializer));
  }

  @protected
  AddPackingListEntry sse_decode_box_autoadd_add_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_packing_list_entry(deserializer));
  }

  @protected
  AddReservation sse_decode_box_autoadd_add_reservation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_reservation(deserializer));
  }

  @protected
  AddTripAccommodation sse_decode_box_autoadd_add_trip_accommodation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_trip_accommodation(deserializer));
  }

  @protected
  AddTripAttachment sse_decode_box_autoadd_add_trip_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_trip_attachment(deserializer));
  }

  @protected
  AddTripLocation sse_decode_box_autoadd_add_trip_location(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_trip_location(deserializer));
  }

  @protected
  AddTripPointOfInterest sse_decode_box_autoadd_add_trip_point_of_interest(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_trip_point_of_interest(deserializer));
  }

  @protected
  CarRental sse_decode_box_autoadd_car_rental(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_car_rental(deserializer));
  }

  @protected
  CreateTrip sse_decode_box_autoadd_create_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_create_trip(deserializer));
  }

  @protected
  DeletePackingListEntry sse_decode_box_autoadd_delete_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_delete_packing_list_entry(deserializer));
  }

  @protected
  Reservation sse_decode_box_autoadd_reservation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_reservation(deserializer));
  }

  @protected
  SearchWebImages sse_decode_box_autoadd_search_web_images(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_search_web_images(deserializer));
  }

  @protected
  UpdateCarRental sse_decode_box_autoadd_update_car_rental(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_car_rental(deserializer));
  }

  @protected
  UpdatePackingListEntry sse_decode_box_autoadd_update_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_packing_list_entry(deserializer));
  }

  @protected
  UpdateReservation sse_decode_box_autoadd_update_reservation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_reservation(deserializer));
  }

  @protected
  UpdateTrip sse_decode_box_autoadd_update_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_trip(deserializer));
  }

  @protected
  UpdateTripAccommodation sse_decode_box_autoadd_update_trip_accommodation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_trip_accommodation(deserializer));
  }

  @protected
  UpdateTripPointOfInterest
      sse_decode_box_autoadd_update_trip_point_of_interest(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_trip_point_of_interest(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  WeatherForecast sse_decode_box_autoadd_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weather_forecast(deserializer));
  }

  @protected
  CarRental sse_decode_car_rental(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_provider = sse_decode_String(deserializer);
    var var_pickUpDate = sse_decode_Chrono_Utc(deserializer);
    var var_pickUpLocation = sse_decode_String(deserializer);
    var var_returnDate = sse_decode_Chrono_Utc(deserializer);
    var var_returnLocation = sse_decode_opt_String(deserializer);
    var var_bookingNumber = sse_decode_opt_String(deserializer);
    var var_attachments = sse_decode_list_trip_attachment(deserializer);
    return CarRental(
        id: var_id,
        provider: var_provider,
        pickUpDate: var_pickUpDate,
        pickUpLocation: var_pickUpLocation,
        returnDate: var_returnDate,
        returnLocation: var_returnLocation,
        bookingNumber: var_bookingNumber,
        attachments: var_attachments);
  }

  @protected
  Coordinates sse_decode_coordinates(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_latitude = sse_decode_f_64(deserializer);
    var var_longitude = sse_decode_f_64(deserializer);
    return Coordinates(latitude: var_latitude, longitude: var_longitude);
  }

  @protected
  CreateTrip sse_decode_create_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_startDate = sse_decode_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_Chrono_Utc(deserializer);
    var var_headerImage = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return CreateTrip(
        name: var_name,
        startDate: var_startDate,
        endDate: var_endDate,
        headerImage: var_headerImage);
  }

  @protected
  DailyWeatherForecast sse_decode_daily_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_Chrono_Utc(deserializer);
    var var_minTemperature = sse_decode_f_64(deserializer);
    var var_maxTemperature = sse_decode_f_64(deserializer);
    var var_morningTemperature = sse_decode_f_64(deserializer);
    var var_dayTemperature = sse_decode_f_64(deserializer);
    var var_eveningTemperature = sse_decode_f_64(deserializer);
    var var_nightTemperature = sse_decode_f_64(deserializer);
    var var_condition = sse_decode_weather_condition(deserializer);
    var var_precipitationAmount = sse_decode_f_64(deserializer);
    var var_precipitationProbability = sse_decode_f_64(deserializer);
    var var_windSpeed = sse_decode_f_64(deserializer);
    return DailyWeatherForecast(
        day: var_day,
        minTemperature: var_minTemperature,
        maxTemperature: var_maxTemperature,
        morningTemperature: var_morningTemperature,
        dayTemperature: var_dayTemperature,
        eveningTemperature: var_eveningTemperature,
        nightTemperature: var_nightTemperature,
        condition: var_condition,
        precipitationAmount: var_precipitationAmount,
        precipitationProbability: var_precipitationProbability,
        windSpeed: var_windSpeed);
  }

  @protected
  DeletePackingListEntry sse_decode_delete_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    return DeletePackingListEntry(id: var_id);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  HourlyWeatherForecast sse_decode_hourly_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_time = sse_decode_Chrono_Utc(deserializer);
    var var_temperature = sse_decode_f_64(deserializer);
    var var_windSpeed = sse_decode_f_64(deserializer);
    var var_precipitationAmount = sse_decode_f_64(deserializer);
    var var_precipitationProbability = sse_decode_f_64(deserializer);
    var var_condition = sse_decode_weather_condition(deserializer);
    return HourlyWeatherForecast(
        time: var_time,
        temperature: var_temperature,
        windSpeed: var_windSpeed,
        precipitationAmount: var_precipitationAmount,
        precipitationProbability: var_precipitationProbability,
        condition: var_condition);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<AccommodationModel> sse_decode_list_accommodation_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AccommodationModel>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_accommodation_model(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttachmentListModel> sse_decode_list_attachment_list_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttachmentListModel>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attachment_list_model(deserializer));
    }
    return ans_;
  }

  @protected
  List<Booking> sse_decode_list_booking(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Booking>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_booking(deserializer));
    }
    return ans_;
  }

  @protected
  List<DailyWeatherForecast> sse_decode_list_daily_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DailyWeatherForecast>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_daily_weather_forecast(deserializer));
    }
    return ans_;
  }

  @protected
  List<HourlyWeatherForecast> sse_decode_list_hourly_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HourlyWeatherForecast>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_hourly_weather_forecast(deserializer));
    }
    return ans_;
  }

  @protected
  List<LocationEntry> sse_decode_list_location_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LocationEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_location_entry(deserializer));
    }
    return ans_;
  }

  @protected
  List<PackingListEntry> sse_decode_list_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PackingListEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_packing_list_entry(deserializer));
    }
    return ans_;
  }

  @protected
  List<PackingListEntryCondition> sse_decode_list_packing_list_entry_condition(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PackingListEntryCondition>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_packing_list_entry_condition(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointOfInterestModel> sse_decode_list_point_of_interest_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointOfInterestModel>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_of_interest_model(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<TimelineItem> sse_decode_list_timeline_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TimelineItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_timeline_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<TripAttachment> sse_decode_list_trip_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TripAttachment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip_attachment(deserializer));
    }
    return ans_;
  }

  @protected
  List<TripListModel> sse_decode_list_trip_list_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TripListModel>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip_list_model(deserializer));
    }
    return ans_;
  }

  @protected
  List<TripLocationListModel> sse_decode_list_trip_location_list_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TripLocationListModel>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip_location_list_model(deserializer));
    }
    return ans_;
  }

  @protected
  List<TripLocationSummary> sse_decode_list_trip_location_summary(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TripLocationSummary>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip_location_summary(deserializer));
    }
    return ans_;
  }

  @protected
  List<TripPackingListEntry> sse_decode_list_trip_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TripPackingListEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip_packing_list_entry(deserializer));
    }
    return ans_;
  }

  @protected
  List<TripPackingListGroup> sse_decode_list_trip_packing_list_group(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TripPackingListGroup>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip_packing_list_group(deserializer));
    }
    return ans_;
  }

  @protected
  List<WebImage> sse_decode_list_web_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WebImage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_web_image(deserializer));
    }
    return ans_;
  }

  @protected
  LocationEntry sse_decode_location_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_coordinates = sse_decode_coordinates(deserializer);
    var var_country = sse_decode_String(deserializer);
    return LocationEntry(
        name: var_name, coordinates: var_coordinates, country: var_country);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AccommodationStatus? sse_decode_opt_box_autoadd_accommodation_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_accommodation_status(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeatherForecast? sse_decode_opt_box_autoadd_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weather_forecast(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PackingListEntry sse_decode_packing_list_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_conditions =
        sse_decode_list_packing_list_entry_condition(deserializer);
    var var_quantity = sse_decode_quantity(deserializer);
    var var_category = sse_decode_opt_String(deserializer);
    return PackingListEntry(
        id: var_id,
        name: var_name,
        description: var_description,
        conditions: var_conditions,
        quantity: var_quantity,
        category: var_category);
  }

  @protected
  PackingListEntryCondition sse_decode_packing_list_entry_condition(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_length = sse_decode_u_32(deserializer);
        return PackingListEntryCondition_MinTripDuration(length: var_length);
      case 1:
        var var_length = sse_decode_u_32(deserializer);
        return PackingListEntryCondition_MaxTripDuration(length: var_length);
      case 2:
        var var_temperature = sse_decode_f_64(deserializer);
        return PackingListEntryCondition_MinTemperature(
            temperature: var_temperature);
      case 3:
        var var_temperature = sse_decode_f_64(deserializer);
        return PackingListEntryCondition_MaxTemperature(
            temperature: var_temperature);
      case 4:
        var var_condition = sse_decode_weather_condition(deserializer);
        var var_minProbability = sse_decode_f_64(deserializer);
        return PackingListEntryCondition_Weather(
            condition: var_condition, minProbability: var_minProbability);
      case 5:
        var var_tag = sse_decode_String(deserializer);
        return PackingListEntryCondition_Tag(tag: var_tag);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PointOfInterestModel sse_decode_point_of_interest_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_website = sse_decode_opt_String(deserializer);
    var var_openingHours = sse_decode_opt_String(deserializer);
    var var_price = sse_decode_opt_String(deserializer);
    return PointOfInterestModel(
        id: var_id,
        name: var_name,
        address: var_address,
        website: var_website,
        openingHours: var_openingHours,
        price: var_price);
  }

  @protected
  Quantity sse_decode_quantity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_perDay = sse_decode_opt_box_autoadd_usize(deserializer);
    var var_perNight = sse_decode_opt_box_autoadd_usize(deserializer);
    var var_fixed = sse_decode_opt_box_autoadd_usize(deserializer);
    return Quantity(
        perDay: var_perDay, perNight: var_perNight, fixed: var_fixed);
  }

  @protected
  Reservation sse_decode_reservation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    var var_startDate = sse_decode_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_link = sse_decode_opt_String(deserializer);
    var var_bookingNumber = sse_decode_opt_String(deserializer);
    var var_attachments = sse_decode_list_trip_attachment(deserializer);
    return Reservation(
        id: var_id,
        title: var_title,
        address: var_address,
        startDate: var_startDate,
        endDate: var_endDate,
        link: var_link,
        bookingNumber: var_bookingNumber,
        attachments: var_attachments);
  }

  @protected
  SearchWebImages sse_decode_search_web_images(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_query = sse_decode_String(deserializer);
    return SearchWebImages(query: var_query);
  }

  @protected
  TimelineItem sse_decode_timeline_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_date = sse_decode_Chrono_Utc(deserializer);
    var var_details = sse_decode_timeline_item_details(deserializer);
    return TimelineItem(date: var_date, details: var_details);
  }

  @protected
  TimelineItemDetails sse_decode_timeline_item_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_provider = sse_decode_String(deserializer);
        var var_address = sse_decode_String(deserializer);
        return TimelineItemDetails_CarRentalPickUp(
            provider: var_provider, address: var_address);
      case 1:
        var var_provider = sse_decode_String(deserializer);
        var var_address = sse_decode_String(deserializer);
        return TimelineItemDetails_CarRentalDropOff(
            provider: var_provider, address: var_address);
      case 2:
        var var_title = sse_decode_String(deserializer);
        var var_address = sse_decode_opt_String(deserializer);
        return TimelineItemDetails_Reservation(
            title: var_title, address: var_address);
      case 3:
        var var_address = sse_decode_opt_String(deserializer);
        return TimelineItemDetails_CheckIn(address: var_address);
      case 4:
        var var_address = sse_decode_opt_String(deserializer);
        return TimelineItemDetails_CheckOut(address: var_address);
      case 5:
        var var_airport = sse_decode_String(deserializer);
        var var_flightNumber = sse_decode_String(deserializer);
        var var_seat = sse_decode_opt_String(deserializer);
        return TimelineItemDetails_FlightTakeOff(
            airport: var_airport,
            flightNumber: var_flightNumber,
            seat: var_seat);
      case 6:
        var var_airport = sse_decode_String(deserializer);
        var var_flightNumber = sse_decode_String(deserializer);
        return TimelineItemDetails_FlightLanding(
            airport: var_airport, flightNumber: var_flightNumber);
      case 7:
        var var_station = sse_decode_String(deserializer);
        var var_trainNumber = sse_decode_String(deserializer);
        var var_seat = sse_decode_opt_String(deserializer);
        return TimelineItemDetails_TrainOrigin(
            station: var_station, trainNumber: var_trainNumber, seat: var_seat);
      case 8:
        var var_station = sse_decode_String(deserializer);
        var var_trainNumber = sse_decode_String(deserializer);
        return TimelineItemDetails_TrainDestination(
            station: var_station, trainNumber: var_trainNumber);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TimelineModel sse_decode_timeline_model(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_past = sse_decode_list_timeline_item(deserializer);
    var var_future = sse_decode_list_timeline_item(deserializer);
    return TimelineModel(past: var_past, future: var_future);
  }

  @protected
  TripAttachment sse_decode_trip_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_fileName = sse_decode_String(deserializer);
    var var_contentType = sse_decode_String(deserializer);
    return TripAttachment(
        id: var_id,
        name: var_name,
        fileName: var_fileName,
        contentType: var_contentType);
  }

  @protected
  TripListModel sse_decode_trip_list_model(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_startDate = sse_decode_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_Chrono_Utc(deserializer);
    var var_headerImage = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return TripListModel(
        id: var_id,
        name: var_name,
        startDate: var_startDate,
        endDate: var_endDate,
        headerImage: var_headerImage);
  }

  @protected
  TripLocationListModel sse_decode_trip_location_list_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_coordinates = sse_decode_coordinates(deserializer);
    var var_city = sse_decode_String(deserializer);
    var var_country = sse_decode_String(deserializer);
    var var_forecast =
        sse_decode_opt_box_autoadd_weather_forecast(deserializer);
    return TripLocationListModel(
        id: var_id,
        coordinates: var_coordinates,
        city: var_city,
        country: var_country,
        forecast: var_forecast);
  }

  @protected
  TripLocationSummary sse_decode_trip_location_summary(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_city = sse_decode_String(deserializer);
    var var_country = sse_decode_String(deserializer);
    return TripLocationSummary(city: var_city, country: var_country);
  }

  @protected
  TripOverviewModel sse_decode_trip_overview_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_headerImage = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_pendingPackingListItems = sse_decode_usize(deserializer);
    var var_packedPackingListItems = sse_decode_usize(deserializer);
    var var_totalPackingListItems = sse_decode_usize(deserializer);
    var var_pointsOfInterestCount = sse_decode_usize(deserializer);
    var var_accommodationStatus =
        sse_decode_opt_box_autoadd_accommodation_status(deserializer);
    var var_locationsList = sse_decode_list_trip_location_summary(deserializer);
    return TripOverviewModel(
        id: var_id,
        name: var_name,
        headerImage: var_headerImage,
        pendingPackingListItems: var_pendingPackingListItems,
        packedPackingListItems: var_packedPackingListItems,
        totalPackingListItems: var_totalPackingListItems,
        pointsOfInterestCount: var_pointsOfInterestCount,
        accommodationStatus: var_accommodationStatus,
        locationsList: var_locationsList);
  }

  @protected
  TripPackingListEntry sse_decode_trip_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_packingListEntry = sse_decode_packing_list_entry(deserializer);
    var var_isPacked = sse_decode_bool(deserializer);
    var var_quantity = sse_decode_opt_box_autoadd_usize(deserializer);
    return TripPackingListEntry(
        packingListEntry: var_packingListEntry,
        isPacked: var_isPacked,
        quantity: var_quantity);
  }

  @protected
  TripPackingListGroup sse_decode_trip_packing_list_group(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_entries = sse_decode_list_trip_packing_list_entry(deserializer);
    return TripPackingListGroup(
        id: var_id, name: var_name, entries: var_entries);
  }

  @protected
  TripPackingListModel sse_decode_trip_packing_list_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_groups = sse_decode_list_trip_packing_list_group(deserializer);
    var var_entries = sse_decode_list_trip_packing_list_entry(deserializer);
    return TripPackingListModel(groups: var_groups, entries: var_entries);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UpdateCarRental sse_decode_update_car_rental(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_provider = sse_decode_String(deserializer);
    var var_pickUpDate = sse_decode_Chrono_Utc(deserializer);
    var var_pickUpLocation = sse_decode_String(deserializer);
    var var_returnDate = sse_decode_Chrono_Utc(deserializer);
    var var_returnLocation = sse_decode_opt_String(deserializer);
    var var_bookingNumber = sse_decode_opt_String(deserializer);
    return UpdateCarRental(
        id: var_id,
        provider: var_provider,
        pickUpDate: var_pickUpDate,
        pickUpLocation: var_pickUpLocation,
        returnDate: var_returnDate,
        returnLocation: var_returnLocation,
        bookingNumber: var_bookingNumber);
  }

  @protected
  UpdatePackingListEntry sse_decode_update_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_conditions =
        sse_decode_list_packing_list_entry_condition(deserializer);
    var var_quantity = sse_decode_quantity(deserializer);
    var var_category = sse_decode_opt_String(deserializer);
    return UpdatePackingListEntry(
        id: var_id,
        name: var_name,
        description: var_description,
        conditions: var_conditions,
        quantity: var_quantity,
        category: var_category);
  }

  @protected
  UpdateReservation sse_decode_update_reservation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    var var_startDate = sse_decode_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_link = sse_decode_opt_String(deserializer);
    var var_bookingNumber = sse_decode_opt_String(deserializer);
    return UpdateReservation(
        id: var_id,
        title: var_title,
        address: var_address,
        startDate: var_startDate,
        endDate: var_endDate,
        link: var_link,
        bookingNumber: var_bookingNumber);
  }

  @protected
  UpdateTrip sse_decode_update_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_startDate = sse_decode_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_Chrono_Utc(deserializer);
    var var_headerImage = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return UpdateTrip(
        id: var_id,
        name: var_name,
        startDate: var_startDate,
        endDate: var_endDate,
        headerImage: var_headerImage);
  }

  @protected
  UpdateTripAccommodation sse_decode_update_trip_accommodation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    var var_checkIn = sse_decode_Chrono_Utc(deserializer);
    var var_checkOut = sse_decode_Chrono_Utc(deserializer);
    return UpdateTripAccommodation(
        id: var_id,
        name: var_name,
        address: var_address,
        checkIn: var_checkIn,
        checkOut: var_checkOut);
  }

  @protected
  UpdateTripPointOfInterest sse_decode_update_trip_point_of_interest(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_website = sse_decode_opt_String(deserializer);
    var var_openingHours = sse_decode_opt_String(deserializer);
    var var_price = sse_decode_opt_String(deserializer);
    return UpdateTripPointOfInterest(
        id: var_id,
        name: var_name,
        address: var_address,
        website: var_website,
        openingHours: var_openingHours,
        price: var_price);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WeatherCondition sse_decode_weather_condition(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WeatherCondition.values[inner];
  }

  @protected
  WeatherForecast sse_decode_weather_forecast(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hourlyForecast =
        sse_decode_list_hourly_weather_forecast(deserializer);
    var var_dailyForecast =
        sse_decode_list_daily_weather_forecast(deserializer);
    return WeatherForecast(
        hourlyForecast: var_hourlyForecast, dailyForecast: var_dailyForecast);
  }

  @protected
  WebImage sse_decode_web_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_thumbnailUrl = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    return WebImage(
        id: var_id,
        url: var_url,
        thumbnailUrl: var_thumbnailUrl,
        author: var_author,
        description: var_description);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_accommodation_model(
      AccommodationModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.address, serializer);
    sse_encode_Chrono_Utc(self.checkIn, serializer);
    sse_encode_Chrono_Utc(self.checkOut, serializer);
    sse_encode_list_trip_attachment(self.attachments, serializer);
  }

  @protected
  void sse_encode_accommodation_status(
      AccommodationStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.accommodationName, serializer);
    sse_encode_accommodation_status_type(self.statusType, serializer);
    sse_encode_Chrono_Utc(self.datetime, serializer);
  }

  @protected
  void sse_encode_accommodation_status_type(
      AccommodationStatusType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_add_car_rental(AddCarRental self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.tripId, serializer);
    sse_encode_String(self.provider, serializer);
    sse_encode_Chrono_Utc(self.pickUpDate, serializer);
    sse_encode_String(self.pickUpLocation, serializer);
    sse_encode_Chrono_Utc(self.returnDate, serializer);
    sse_encode_opt_String(self.returnLocation, serializer);
    sse_encode_opt_String(self.bookingNumber, serializer);
  }

  @protected
  void sse_encode_add_packing_list_entry(
      AddPackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_list_packing_list_entry_condition(self.conditions, serializer);
    sse_encode_quantity(self.quantity, serializer);
    sse_encode_opt_String(self.category, serializer);
  }

  @protected
  void sse_encode_add_reservation(
      AddReservation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.tripId, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.address, serializer);
    sse_encode_Chrono_Utc(self.startDate, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_String(self.link, serializer);
    sse_encode_opt_String(self.bookingNumber, serializer);
  }

  @protected
  void sse_encode_add_trip_accommodation(
      AddTripAccommodation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.tripId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.checkIn, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.checkOut, serializer);
    sse_encode_opt_String(self.address, serializer);
  }

  @protected
  void sse_encode_add_trip_attachment(
      AddTripAttachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.tripId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.path, serializer);
  }

  @protected
  void sse_encode_add_trip_location(
      AddTripLocation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.tripId, serializer);
    sse_encode_location_entry(self.location, serializer);
  }

  @protected
  void sse_encode_add_trip_point_of_interest(
      AddTripPointOfInterest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.tripId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_opt_String(self.website, serializer);
    sse_encode_opt_String(self.openingHours, serializer);
    sse_encode_opt_String(self.price, serializer);
  }

  @protected
  void sse_encode_attachment_list_model(
      AttachmentListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.fileName, serializer);
    sse_encode_String(self.contentType, serializer);
  }

  @protected
  void sse_encode_booking(Booking self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Booking_Reservation(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_reservation(field0, serializer);
      case Booking_CarRental(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_car_rental(field0, serializer);
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(
      DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_accommodation_status(
      AccommodationStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_accommodation_status(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_car_rental(
      AddCarRental self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_car_rental(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_packing_list_entry(
      AddPackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_packing_list_entry(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_reservation(
      AddReservation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_reservation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_trip_accommodation(
      AddTripAccommodation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_trip_accommodation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_trip_attachment(
      AddTripAttachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_trip_attachment(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_trip_location(
      AddTripLocation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_trip_location(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_trip_point_of_interest(
      AddTripPointOfInterest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_trip_point_of_interest(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_car_rental(
      CarRental self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_car_rental(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_create_trip(
      CreateTrip self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_create_trip(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_delete_packing_list_entry(
      DeletePackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_delete_packing_list_entry(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_reservation(
      Reservation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_reservation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_search_web_images(
      SearchWebImages self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_search_web_images(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_car_rental(
      UpdateCarRental self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_car_rental(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_packing_list_entry(
      UpdatePackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_packing_list_entry(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_reservation(
      UpdateReservation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_reservation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_trip(
      UpdateTrip self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_trip(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_trip_accommodation(
      UpdateTripAccommodation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_trip_accommodation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_trip_point_of_interest(
      UpdateTripPointOfInterest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_trip_point_of_interest(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weather_forecast(
      WeatherForecast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weather_forecast(self, serializer);
  }

  @protected
  void sse_encode_car_rental(CarRental self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.provider, serializer);
    sse_encode_Chrono_Utc(self.pickUpDate, serializer);
    sse_encode_String(self.pickUpLocation, serializer);
    sse_encode_Chrono_Utc(self.returnDate, serializer);
    sse_encode_opt_String(self.returnLocation, serializer);
    sse_encode_opt_String(self.bookingNumber, serializer);
    sse_encode_list_trip_attachment(self.attachments, serializer);
  }

  @protected
  void sse_encode_coordinates(Coordinates self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.latitude, serializer);
    sse_encode_f_64(self.longitude, serializer);
  }

  @protected
  void sse_encode_create_trip(CreateTrip self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_Chrono_Utc(self.startDate, serializer);
    sse_encode_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.headerImage, serializer);
  }

  @protected
  void sse_encode_daily_weather_forecast(
      DailyWeatherForecast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.day, serializer);
    sse_encode_f_64(self.minTemperature, serializer);
    sse_encode_f_64(self.maxTemperature, serializer);
    sse_encode_f_64(self.morningTemperature, serializer);
    sse_encode_f_64(self.dayTemperature, serializer);
    sse_encode_f_64(self.eveningTemperature, serializer);
    sse_encode_f_64(self.nightTemperature, serializer);
    sse_encode_weather_condition(self.condition, serializer);
    sse_encode_f_64(self.precipitationAmount, serializer);
    sse_encode_f_64(self.precipitationProbability, serializer);
    sse_encode_f_64(self.windSpeed, serializer);
  }

  @protected
  void sse_encode_delete_packing_list_entry(
      DeletePackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_hourly_weather_forecast(
      HourlyWeatherForecast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.time, serializer);
    sse_encode_f_64(self.temperature, serializer);
    sse_encode_f_64(self.windSpeed, serializer);
    sse_encode_f_64(self.precipitationAmount, serializer);
    sse_encode_f_64(self.precipitationProbability, serializer);
    sse_encode_weather_condition(self.condition, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_accommodation_model(
      List<AccommodationModel> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_accommodation_model(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attachment_list_model(
      List<AttachmentListModel> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attachment_list_model(item, serializer);
    }
  }

  @protected
  void sse_encode_list_booking(List<Booking> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_booking(item, serializer);
    }
  }

  @protected
  void sse_encode_list_daily_weather_forecast(
      List<DailyWeatherForecast> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_daily_weather_forecast(item, serializer);
    }
  }

  @protected
  void sse_encode_list_hourly_weather_forecast(
      List<HourlyWeatherForecast> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_hourly_weather_forecast(item, serializer);
    }
  }

  @protected
  void sse_encode_list_location_entry(
      List<LocationEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_location_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_packing_list_entry(
      List<PackingListEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_packing_list_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_packing_list_entry_condition(
      List<PackingListEntryCondition> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_packing_list_entry_condition(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_of_interest_model(
      List<PointOfInterestModel> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_of_interest_model(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_timeline_item(
      List<TimelineItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_timeline_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip_attachment(
      List<TripAttachment> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip_attachment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip_list_model(
      List<TripListModel> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip_list_model(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip_location_list_model(
      List<TripLocationListModel> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip_location_list_model(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip_location_summary(
      List<TripLocationSummary> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip_location_summary(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip_packing_list_entry(
      List<TripPackingListEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip_packing_list_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip_packing_list_group(
      List<TripPackingListGroup> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip_packing_list_group(item, serializer);
    }
  }

  @protected
  void sse_encode_list_web_image(
      List<WebImage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_web_image(item, serializer);
    }
  }

  @protected
  void sse_encode_location_entry(LocationEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_coordinates(self.coordinates, serializer);
    sse_encode_String(self.country, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(
      DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_accommodation_status(
      AccommodationStatus? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_accommodation_status(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weather_forecast(
      WeatherForecast? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weather_forecast(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_packing_list_entry(
      PackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_list_packing_list_entry_condition(self.conditions, serializer);
    sse_encode_quantity(self.quantity, serializer);
    sse_encode_opt_String(self.category, serializer);
  }

  @protected
  void sse_encode_packing_list_entry_condition(
      PackingListEntryCondition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PackingListEntryCondition_MinTripDuration(length: final length):
        sse_encode_i_32(0, serializer);
        sse_encode_u_32(length, serializer);
      case PackingListEntryCondition_MaxTripDuration(length: final length):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(length, serializer);
      case PackingListEntryCondition_MinTemperature(
          temperature: final temperature
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_f_64(temperature, serializer);
      case PackingListEntryCondition_MaxTemperature(
          temperature: final temperature
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_f_64(temperature, serializer);
      case PackingListEntryCondition_Weather(
          condition: final condition,
          minProbability: final minProbability
        ):
        sse_encode_i_32(4, serializer);
        sse_encode_weather_condition(condition, serializer);
        sse_encode_f_64(minProbability, serializer);
      case PackingListEntryCondition_Tag(tag: final tag):
        sse_encode_i_32(5, serializer);
        sse_encode_String(tag, serializer);
    }
  }

  @protected
  void sse_encode_point_of_interest_model(
      PointOfInterestModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_opt_String(self.website, serializer);
    sse_encode_opt_String(self.openingHours, serializer);
    sse_encode_opt_String(self.price, serializer);
  }

  @protected
  void sse_encode_quantity(Quantity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_usize(self.perDay, serializer);
    sse_encode_opt_box_autoadd_usize(self.perNight, serializer);
    sse_encode_opt_box_autoadd_usize(self.fixed, serializer);
  }

  @protected
  void sse_encode_reservation(Reservation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.address, serializer);
    sse_encode_Chrono_Utc(self.startDate, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_String(self.link, serializer);
    sse_encode_opt_String(self.bookingNumber, serializer);
    sse_encode_list_trip_attachment(self.attachments, serializer);
  }

  @protected
  void sse_encode_search_web_images(
      SearchWebImages self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.query, serializer);
  }

  @protected
  void sse_encode_timeline_item(TimelineItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.date, serializer);
    sse_encode_timeline_item_details(self.details, serializer);
  }

  @protected
  void sse_encode_timeline_item_details(
      TimelineItemDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TimelineItemDetails_CarRentalPickUp(
          provider: final provider,
          address: final address
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(provider, serializer);
        sse_encode_String(address, serializer);
      case TimelineItemDetails_CarRentalDropOff(
          provider: final provider,
          address: final address
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(provider, serializer);
        sse_encode_String(address, serializer);
      case TimelineItemDetails_Reservation(
          title: final title,
          address: final address
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_String(title, serializer);
        sse_encode_opt_String(address, serializer);
      case TimelineItemDetails_CheckIn(address: final address):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_String(address, serializer);
      case TimelineItemDetails_CheckOut(address: final address):
        sse_encode_i_32(4, serializer);
        sse_encode_opt_String(address, serializer);
      case TimelineItemDetails_FlightTakeOff(
          airport: final airport,
          flightNumber: final flightNumber,
          seat: final seat
        ):
        sse_encode_i_32(5, serializer);
        sse_encode_String(airport, serializer);
        sse_encode_String(flightNumber, serializer);
        sse_encode_opt_String(seat, serializer);
      case TimelineItemDetails_FlightLanding(
          airport: final airport,
          flightNumber: final flightNumber
        ):
        sse_encode_i_32(6, serializer);
        sse_encode_String(airport, serializer);
        sse_encode_String(flightNumber, serializer);
      case TimelineItemDetails_TrainOrigin(
          station: final station,
          trainNumber: final trainNumber,
          seat: final seat
        ):
        sse_encode_i_32(7, serializer);
        sse_encode_String(station, serializer);
        sse_encode_String(trainNumber, serializer);
        sse_encode_opt_String(seat, serializer);
      case TimelineItemDetails_TrainDestination(
          station: final station,
          trainNumber: final trainNumber
        ):
        sse_encode_i_32(8, serializer);
        sse_encode_String(station, serializer);
        sse_encode_String(trainNumber, serializer);
    }
  }

  @protected
  void sse_encode_timeline_model(TimelineModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_timeline_item(self.past, serializer);
    sse_encode_list_timeline_item(self.future, serializer);
  }

  @protected
  void sse_encode_trip_attachment(
      TripAttachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.fileName, serializer);
    sse_encode_String(self.contentType, serializer);
  }

  @protected
  void sse_encode_trip_list_model(
      TripListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_Chrono_Utc(self.startDate, serializer);
    sse_encode_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.headerImage, serializer);
  }

  @protected
  void sse_encode_trip_location_list_model(
      TripLocationListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_coordinates(self.coordinates, serializer);
    sse_encode_String(self.city, serializer);
    sse_encode_String(self.country, serializer);
    sse_encode_opt_box_autoadd_weather_forecast(self.forecast, serializer);
  }

  @protected
  void sse_encode_trip_location_summary(
      TripLocationSummary self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.city, serializer);
    sse_encode_String(self.country, serializer);
  }

  @protected
  void sse_encode_trip_overview_model(
      TripOverviewModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.headerImage, serializer);
    sse_encode_usize(self.pendingPackingListItems, serializer);
    sse_encode_usize(self.packedPackingListItems, serializer);
    sse_encode_usize(self.totalPackingListItems, serializer);
    sse_encode_usize(self.pointsOfInterestCount, serializer);
    sse_encode_opt_box_autoadd_accommodation_status(
        self.accommodationStatus, serializer);
    sse_encode_list_trip_location_summary(self.locationsList, serializer);
  }

  @protected
  void sse_encode_trip_packing_list_entry(
      TripPackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_packing_list_entry(self.packingListEntry, serializer);
    sse_encode_bool(self.isPacked, serializer);
    sse_encode_opt_box_autoadd_usize(self.quantity, serializer);
  }

  @protected
  void sse_encode_trip_packing_list_group(
      TripPackingListGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_list_trip_packing_list_entry(self.entries, serializer);
  }

  @protected
  void sse_encode_trip_packing_list_model(
      TripPackingListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_trip_packing_list_group(self.groups, serializer);
    sse_encode_list_trip_packing_list_entry(self.entries, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_update_car_rental(
      UpdateCarRental self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.provider, serializer);
    sse_encode_Chrono_Utc(self.pickUpDate, serializer);
    sse_encode_String(self.pickUpLocation, serializer);
    sse_encode_Chrono_Utc(self.returnDate, serializer);
    sse_encode_opt_String(self.returnLocation, serializer);
    sse_encode_opt_String(self.bookingNumber, serializer);
  }

  @protected
  void sse_encode_update_packing_list_entry(
      UpdatePackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_list_packing_list_entry_condition(self.conditions, serializer);
    sse_encode_quantity(self.quantity, serializer);
    sse_encode_opt_String(self.category, serializer);
  }

  @protected
  void sse_encode_update_reservation(
      UpdateReservation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.address, serializer);
    sse_encode_Chrono_Utc(self.startDate, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_String(self.link, serializer);
    sse_encode_opt_String(self.bookingNumber, serializer);
  }

  @protected
  void sse_encode_update_trip(UpdateTrip self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_Chrono_Utc(self.startDate, serializer);
    sse_encode_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.headerImage, serializer);
  }

  @protected
  void sse_encode_update_trip_accommodation(
      UpdateTripAccommodation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.address, serializer);
    sse_encode_Chrono_Utc(self.checkIn, serializer);
    sse_encode_Chrono_Utc(self.checkOut, serializer);
  }

  @protected
  void sse_encode_update_trip_point_of_interest(
      UpdateTripPointOfInterest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_opt_String(self.website, serializer);
    sse_encode_opt_String(self.openingHours, serializer);
    sse_encode_opt_String(self.price, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_weather_condition(
      WeatherCondition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_weather_forecast(
      WeatherForecast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_hourly_weather_forecast(self.hourlyForecast, serializer);
    sse_encode_list_daily_weather_forecast(self.dailyForecast, serializer);
  }

  @protected
  void sse_encode_web_image(WebImage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.thumbnailUrl, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_opt_String(self.description, serializer);
  }
}
