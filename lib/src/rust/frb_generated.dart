// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'api/attachments.dart';
import 'api/packing_list.dart';
import 'api/trips.dart';
import 'commands/add_packing_list_entry.dart';
import 'commands/add_trip_attachment.dart';
import 'commands/add_trip_location.dart';
import 'commands/create_trip.dart';
import 'commands/delete_packing_list_entry.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'models.dart';
import 'models/transits.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.4.0';

  @override
  int get rustContentHash => 1723494681;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_holiday_planner',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiInitApp();

  Future<void> crateApiRunBackgroundJobs();

  Future<void> crateApiAttachmentsAddTripAttachment(
      {required AddTripAttachment command});

  Future<void> crateApiAttachmentsDeleteAttachment(
      {required UuidValue attachmentId});

  Future<void> crateApiAttachmentsReadAttachment(
      {required UuidValue attachmentId, required String targetPath});

  Future<PackingListEntry> crateApiPackingListAddPackingListEntry(
      {required AddPackingListEntry command});

  Future<void> crateApiPackingListDeletePackingListEntry(
      {required DeletePackingListEntry command});

  Future<List<PackingListEntry>> crateApiPackingListGetPackingList();

  Future<void> crateApiTripsAddTripLocation({required AddTripLocation command});

  Future<Trip> crateApiTripsCreateTrip({required CreateTrip command});

  Future<Trip?> crateApiTripsGetTrip({required UuidValue id});

  Future<TripPackingListModel> crateApiTripsGetTripPackingList(
      {required UuidValue tripId});

  Future<List<Trip>> crateApiTripsGetTrips();

  Future<void> crateApiTripsMarkAsPacked(
      {required UuidValue tripId, required UuidValue entryId});

  Future<void> crateApiTripsMarkAsUnpacked(
      {required UuidValue tripId, required UuidValue entryId});

  Future<List<LocationEntry>> crateApiTripsSearchLocations(
      {required String query});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiRunBackgroundJobs() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRunBackgroundJobsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRunBackgroundJobsConstMeta => const TaskConstMeta(
        debugName: "run_background_jobs",
        argNames: [],
      );

  @override
  Future<void> crateApiAttachmentsAddTripAttachment(
      {required AddTripAttachment command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_trip_attachment(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAttachmentsAddTripAttachmentConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAttachmentsAddTripAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "add_trip_attachment",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiAttachmentsDeleteAttachment(
      {required UuidValue attachmentId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(attachmentId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAttachmentsDeleteAttachmentConstMeta,
      argValues: [attachmentId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAttachmentsDeleteAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "delete_attachment",
        argNames: ["attachmentId"],
      );

  @override
  Future<void> crateApiAttachmentsReadAttachment(
      {required UuidValue attachmentId, required String targetPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(attachmentId, serializer);
        sse_encode_String(targetPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAttachmentsReadAttachmentConstMeta,
      argValues: [attachmentId, targetPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAttachmentsReadAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "read_attachment",
        argNames: ["attachmentId", "targetPath"],
      );

  @override
  Future<PackingListEntry> crateApiPackingListAddPackingListEntry(
      {required AddPackingListEntry command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_packing_list_entry(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_packing_list_entry,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPackingListAddPackingListEntryConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPackingListAddPackingListEntryConstMeta =>
      const TaskConstMeta(
        debugName: "add_packing_list_entry",
        argNames: ["command"],
      );

  @override
  Future<void> crateApiPackingListDeletePackingListEntry(
      {required DeletePackingListEntry command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_delete_packing_list_entry(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPackingListDeletePackingListEntryConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPackingListDeletePackingListEntryConstMeta =>
      const TaskConstMeta(
        debugName: "delete_packing_list_entry",
        argNames: ["command"],
      );

  @override
  Future<List<PackingListEntry>> crateApiPackingListGetPackingList() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_packing_list_entry,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPackingListGetPackingListConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPackingListGetPackingListConstMeta =>
      const TaskConstMeta(
        debugName: "get_packing_list",
        argNames: [],
      );

  @override
  Future<void> crateApiTripsAddTripLocation(
      {required AddTripLocation command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_add_trip_location(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsAddTripLocationConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsAddTripLocationConstMeta =>
      const TaskConstMeta(
        debugName: "add_trip_location",
        argNames: ["command"],
      );

  @override
  Future<Trip> crateApiTripsCreateTrip({required CreateTrip command}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_create_trip(command, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_trip,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsCreateTripConstMeta,
      argValues: [command],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsCreateTripConstMeta => const TaskConstMeta(
        debugName: "create_trip",
        argNames: ["command"],
      );

  @override
  Future<Trip?> crateApiTripsGetTrip({required UuidValue id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_trip,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetTripConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetTripConstMeta => const TaskConstMeta(
        debugName: "get_trip",
        argNames: ["id"],
      );

  @override
  Future<TripPackingListModel> crateApiTripsGetTripPackingList(
      {required UuidValue tripId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_trip_packing_list_model,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetTripPackingListConstMeta,
      argValues: [tripId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetTripPackingListConstMeta =>
      const TaskConstMeta(
        debugName: "get_trip_packing_list",
        argNames: ["tripId"],
      );

  @override
  Future<List<Trip>> crateApiTripsGetTrips() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_trip,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsGetTripsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsGetTripsConstMeta => const TaskConstMeta(
        debugName: "get_trips",
        argNames: [],
      );

  @override
  Future<void> crateApiTripsMarkAsPacked(
      {required UuidValue tripId, required UuidValue entryId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        sse_encode_Uuid(entryId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsMarkAsPackedConstMeta,
      argValues: [tripId, entryId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsMarkAsPackedConstMeta => const TaskConstMeta(
        debugName: "mark_as_packed",
        argNames: ["tripId", "entryId"],
      );

  @override
  Future<void> crateApiTripsMarkAsUnpacked(
      {required UuidValue tripId, required UuidValue entryId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(tripId, serializer);
        sse_encode_Uuid(entryId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsMarkAsUnpackedConstMeta,
      argValues: [tripId, entryId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsMarkAsUnpackedConstMeta =>
      const TaskConstMeta(
        debugName: "mark_as_unpacked",
        argNames: ["tripId", "entryId"],
      );

  @override
  Future<List<LocationEntry>> crateApiTripsSearchLocations(
      {required String query}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_location_entry,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTripsSearchLocationsConstMeta,
      argValues: [query],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTripsSearchLocationsConstMeta =>
      const TaskConstMeta(
        debugName: "search_locations",
        argNames: ["query"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  Accomodation dco_decode_accomodation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Accomodation(
      name: dco_decode_String(arr[0]),
      location: dco_decode_location(arr[1]),
      checkIn: dco_decode_Chrono_Utc(arr[2]),
      checkOut: dco_decode_Chrono_Utc(arr[3]),
      attachments: dco_decode_list_trip_attachment(arr[4]),
    );
  }

  @protected
  AddPackingListEntry dco_decode_add_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return AddPackingListEntry(
      name: dco_decode_String(arr[0]),
      description: dco_decode_opt_String(arr[1]),
      conditions: dco_decode_list_packing_list_entry_condition(arr[2]),
      quantity: dco_decode_quantity(arr[3]),
      category: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  AddTripAttachment dco_decode_add_trip_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AddTripAttachment(
      tripId: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      path: dco_decode_String(arr[2]),
    );
  }

  @protected
  AddTripLocation dco_decode_add_trip_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AddTripLocation(
      tripId: dco_decode_Uuid(arr[0]),
      location: dco_decode_location_entry(arr[1]),
    );
  }

  @protected
  Airport dco_decode_airport(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Airport(
      name: dco_decode_String(arr[0]),
      iata: dco_decode_String(arr[1]),
      icao: dco_decode_String(arr[2]),
      city: dco_decode_String(arr[3]),
      country: dco_decode_String(arr[4]),
      terminal: dco_decode_String(arr[5]),
      gate: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  AddPackingListEntry dco_decode_box_autoadd_add_packing_list_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_packing_list_entry(raw);
  }

  @protected
  AddTripAttachment dco_decode_box_autoadd_add_trip_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_trip_attachment(raw);
  }

  @protected
  AddTripLocation dco_decode_box_autoadd_add_trip_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_add_trip_location(raw);
  }

  @protected
  CreateTrip dco_decode_box_autoadd_create_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_create_trip(raw);
  }

  @protected
  DeletePackingListEntry dco_decode_box_autoadd_delete_packing_list_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_delete_packing_list_entry(raw);
  }

  @protected
  Flight dco_decode_box_autoadd_flight(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flight(raw);
  }

  @protected
  Train dco_decode_box_autoadd_train(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_train(raw);
  }

  @protected
  Trip dco_decode_box_autoadd_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_trip(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  WeatherForecast dco_decode_box_autoadd_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weather_forecast(raw);
  }

  @protected
  Coordinates dco_decode_coordinates(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Coordinates(
      latitude: dco_decode_f_64(arr[0]),
      longitude: dco_decode_f_64(arr[1]),
    );
  }

  @protected
  CreateTrip dco_decode_create_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return CreateTrip(
      name: dco_decode_String(arr[0]),
      startDate: dco_decode_Chrono_Utc(arr[1]),
      endDate: dco_decode_Chrono_Utc(arr[2]),
      headerImage: dco_decode_opt_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  DailyWeatherForecast dco_decode_daily_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return DailyWeatherForecast(
      day: dco_decode_Chrono_Utc(arr[0]),
      minTemperature: dco_decode_f_64(arr[1]),
      maxTemperature: dco_decode_f_64(arr[2]),
      morningTemperature: dco_decode_f_64(arr[3]),
      dayTemperature: dco_decode_f_64(arr[4]),
      eveningTemperature: dco_decode_f_64(arr[5]),
      nightTemperature: dco_decode_f_64(arr[6]),
      condition: dco_decode_weather_condition(arr[7]),
      precipitationAmount: dco_decode_f_64(arr[8]),
      precipitationProbability: dco_decode_f_64(arr[9]),
      windSpeed: dco_decode_f_64(arr[10]),
    );
  }

  @protected
  DeletePackingListEntry dco_decode_delete_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DeletePackingListEntry(
      id: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  Flight dco_decode_flight(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Flight(
      flightNumber: dco_decode_String(arr[0]),
      departure: dco_decode_airport(arr[1]),
      arrival: dco_decode_airport(arr[2]),
      scheduledDepartureTime: dco_decode_Chrono_Utc(arr[3]),
      scheduledArrivalTime: dco_decode_Chrono_Utc(arr[4]),
      estimatedDepartureTime: dco_decode_opt_box_autoadd_Chrono_Utc(arr[5]),
      estimatedArrivalTime: dco_decode_opt_box_autoadd_Chrono_Utc(arr[6]),
      airline: dco_decode_String(arr[7]),
    );
  }

  @protected
  HourlyWeatherForecast dco_decode_hourly_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return HourlyWeatherForecast(
      time: dco_decode_Chrono_Utc(arr[0]),
      temperature: dco_decode_f_64(arr[1]),
      windSpeed: dco_decode_f_64(arr[2]),
      precipitationAmount: dco_decode_f_64(arr[3]),
      precipitationProbability: dco_decode_f_64(arr[4]),
      condition: dco_decode_weather_condition(arr[5]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<Accomodation> dco_decode_list_accomodation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_accomodation).toList();
  }

  @protected
  List<DailyWeatherForecast> dco_decode_list_daily_weather_forecast(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_daily_weather_forecast)
        .toList();
  }

  @protected
  List<HourlyWeatherForecast> dco_decode_list_hourly_weather_forecast(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_hourly_weather_forecast)
        .toList();
  }

  @protected
  List<Location> dco_decode_list_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_location).toList();
  }

  @protected
  List<LocationEntry> dco_decode_list_location_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_location_entry).toList();
  }

  @protected
  List<PackingListEntry> dco_decode_list_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_packing_list_entry).toList();
  }

  @protected
  List<PackingListEntryCondition> dco_decode_list_packing_list_entry_condition(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_packing_list_entry_condition)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Transit> dco_decode_list_transit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transit).toList();
  }

  @protected
  List<Trip> dco_decode_list_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_trip).toList();
  }

  @protected
  List<TripAttachment> dco_decode_list_trip_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_trip_attachment).toList();
  }

  @protected
  List<TripPackingListEntry> dco_decode_list_trip_packing_list_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_trip_packing_list_entry)
        .toList();
  }

  @protected
  Location dco_decode_location(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Location(
      coordinates: dco_decode_coordinates(arr[0]),
      city: dco_decode_String(arr[1]),
      country: dco_decode_String(arr[2]),
      forecast: dco_decode_opt_box_autoadd_weather_forecast(arr[3]),
      attachments: dco_decode_list_trip_attachment(arr[4]),
    );
  }

  @protected
  LocationEntry dco_decode_location_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocationEntry(
      name: dco_decode_String(arr[0]),
      coordinates: dco_decode_coordinates(arr[1]),
      country: dco_decode_String(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  Trip? dco_decode_opt_box_autoadd_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_trip(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  WeatherForecast? dco_decode_opt_box_autoadd_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_weather_forecast(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PackingListEntry dco_decode_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PackingListEntry(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      description: dco_decode_opt_String(arr[2]),
      conditions: dco_decode_list_packing_list_entry_condition(arr[3]),
      quantity: dco_decode_quantity(arr[4]),
      category: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  PackingListEntryCondition dco_decode_packing_list_entry_condition(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PackingListEntryCondition_MinTripDuration(
          length: dco_decode_u_32(raw[1]),
        );
      case 1:
        return PackingListEntryCondition_MaxTripDuration(
          length: dco_decode_u_32(raw[1]),
        );
      case 2:
        return PackingListEntryCondition_MinTemperature(
          temperature: dco_decode_f_64(raw[1]),
        );
      case 3:
        return PackingListEntryCondition_MaxTemperature(
          temperature: dco_decode_f_64(raw[1]),
        );
      case 4:
        return PackingListEntryCondition_Weather(
          condition: dco_decode_weather_condition(raw[1]),
          minProbability: dco_decode_f_64(raw[2]),
        );
      case 5:
        return PackingListEntryCondition_Tag(
          tag: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Quantity dco_decode_quantity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Quantity(
      perDay: dco_decode_opt_box_autoadd_usize(arr[0]),
      perNight: dco_decode_opt_box_autoadd_usize(arr[1]),
      fixed: dco_decode_opt_box_autoadd_usize(arr[2]),
    );
  }

  @protected
  Train dco_decode_train(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Train(
      departure: dco_decode_train_station(arr[0]),
      arrival: dco_decode_train_station(arr[1]),
      scheduledDepartureTime: dco_decode_Chrono_Utc(arr[2]),
      scheduledArrivalTime: dco_decode_Chrono_Utc(arr[3]),
      estimatedDepartureTime: dco_decode_opt_box_autoadd_Chrono_Utc(arr[4]),
      estimatedArrivalTime: dco_decode_opt_box_autoadd_Chrono_Utc(arr[5]),
    );
  }

  @protected
  TrainStation dco_decode_train_station(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TrainStation(
      name: dco_decode_String(arr[0]),
      scheduledPlatform: dco_decode_String(arr[1]),
      actualPlatform: dco_decode_opt_String(arr[2]),
      city: dco_decode_String(arr[3]),
      country: dco_decode_String(arr[4]),
    );
  }

  @protected
  Transit dco_decode_transit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Transit_Flight(
          dco_decode_box_autoadd_flight(raw[1]),
        );
      case 1:
        return Transit_Train(
          dco_decode_box_autoadd_train(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Trip dco_decode_trip(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Trip(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      startDate: dco_decode_Chrono_Utc(arr[2]),
      endDate: dco_decode_Chrono_Utc(arr[3]),
      locations: dco_decode_list_location(arr[4]),
      transits: dco_decode_list_transit(arr[5]),
      accommodations: dco_decode_list_accomodation(arr[6]),
      headerImage: dco_decode_opt_list_prim_u_8_strict(arr[7]),
      attachments: dco_decode_list_trip_attachment(arr[8]),
    );
  }

  @protected
  TripAttachment dco_decode_trip_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TripAttachment(
      id: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      fileName: dco_decode_String(arr[2]),
      contentType: dco_decode_String(arr[3]),
    );
  }

  @protected
  TripPackingListEntry dco_decode_trip_packing_list_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TripPackingListEntry(
      packingListEntry: dco_decode_packing_list_entry(arr[0]),
      isPacked: dco_decode_bool(arr[1]),
      explicitHidden: dco_decode_bool(arr[2]),
      explicitShown: dco_decode_bool(arr[3]),
      quantity: dco_decode_opt_box_autoadd_usize(arr[4]),
    );
  }

  @protected
  TripPackingListModel dco_decode_trip_packing_list_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TripPackingListModel(
      visible: dco_decode_list_trip_packing_list_entry(arr[0]),
      hidden: dco_decode_list_trip_packing_list_entry(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WeatherCondition dco_decode_weather_condition(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WeatherCondition.values[raw as int];
  }

  @protected
  WeatherForecast dco_decode_weather_forecast(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WeatherForecast(
      coordinates: dco_decode_coordinates(arr[0]),
      hourlyForecast: dco_decode_list_hourly_weather_forecast(arr[1]),
      dailyForecast: dco_decode_list_daily_weather_forecast(arr[2]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  Accomodation sse_decode_accomodation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_location = sse_decode_location(deserializer);
    var var_checkIn = sse_decode_Chrono_Utc(deserializer);
    var var_checkOut = sse_decode_Chrono_Utc(deserializer);
    var var_attachments = sse_decode_list_trip_attachment(deserializer);
    return Accomodation(
        name: var_name,
        location: var_location,
        checkIn: var_checkIn,
        checkOut: var_checkOut,
        attachments: var_attachments);
  }

  @protected
  AddPackingListEntry sse_decode_add_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_conditions =
        sse_decode_list_packing_list_entry_condition(deserializer);
    var var_quantity = sse_decode_quantity(deserializer);
    var var_category = sse_decode_opt_String(deserializer);
    return AddPackingListEntry(
        name: var_name,
        description: var_description,
        conditions: var_conditions,
        quantity: var_quantity,
        category: var_category);
  }

  @protected
  AddTripAttachment sse_decode_add_trip_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tripId = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_path = sse_decode_String(deserializer);
    return AddTripAttachment(
        tripId: var_tripId, name: var_name, path: var_path);
  }

  @protected
  AddTripLocation sse_decode_add_trip_location(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tripId = sse_decode_Uuid(deserializer);
    var var_location = sse_decode_location_entry(deserializer);
    return AddTripLocation(tripId: var_tripId, location: var_location);
  }

  @protected
  Airport sse_decode_airport(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_iata = sse_decode_String(deserializer);
    var var_icao = sse_decode_String(deserializer);
    var var_city = sse_decode_String(deserializer);
    var var_country = sse_decode_String(deserializer);
    var var_terminal = sse_decode_String(deserializer);
    var var_gate = sse_decode_opt_String(deserializer);
    return Airport(
        name: var_name,
        iata: var_iata,
        icao: var_icao,
        city: var_city,
        country: var_country,
        terminal: var_terminal,
        gate: var_gate);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  AddPackingListEntry sse_decode_box_autoadd_add_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_packing_list_entry(deserializer));
  }

  @protected
  AddTripAttachment sse_decode_box_autoadd_add_trip_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_trip_attachment(deserializer));
  }

  @protected
  AddTripLocation sse_decode_box_autoadd_add_trip_location(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_add_trip_location(deserializer));
  }

  @protected
  CreateTrip sse_decode_box_autoadd_create_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_create_trip(deserializer));
  }

  @protected
  DeletePackingListEntry sse_decode_box_autoadd_delete_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_delete_packing_list_entry(deserializer));
  }

  @protected
  Flight sse_decode_box_autoadd_flight(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flight(deserializer));
  }

  @protected
  Train sse_decode_box_autoadd_train(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_train(deserializer));
  }

  @protected
  Trip sse_decode_box_autoadd_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_trip(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  WeatherForecast sse_decode_box_autoadd_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weather_forecast(deserializer));
  }

  @protected
  Coordinates sse_decode_coordinates(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_latitude = sse_decode_f_64(deserializer);
    var var_longitude = sse_decode_f_64(deserializer);
    return Coordinates(latitude: var_latitude, longitude: var_longitude);
  }

  @protected
  CreateTrip sse_decode_create_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_startDate = sse_decode_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_Chrono_Utc(deserializer);
    var var_headerImage = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return CreateTrip(
        name: var_name,
        startDate: var_startDate,
        endDate: var_endDate,
        headerImage: var_headerImage);
  }

  @protected
  DailyWeatherForecast sse_decode_daily_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_Chrono_Utc(deserializer);
    var var_minTemperature = sse_decode_f_64(deserializer);
    var var_maxTemperature = sse_decode_f_64(deserializer);
    var var_morningTemperature = sse_decode_f_64(deserializer);
    var var_dayTemperature = sse_decode_f_64(deserializer);
    var var_eveningTemperature = sse_decode_f_64(deserializer);
    var var_nightTemperature = sse_decode_f_64(deserializer);
    var var_condition = sse_decode_weather_condition(deserializer);
    var var_precipitationAmount = sse_decode_f_64(deserializer);
    var var_precipitationProbability = sse_decode_f_64(deserializer);
    var var_windSpeed = sse_decode_f_64(deserializer);
    return DailyWeatherForecast(
        day: var_day,
        minTemperature: var_minTemperature,
        maxTemperature: var_maxTemperature,
        morningTemperature: var_morningTemperature,
        dayTemperature: var_dayTemperature,
        eveningTemperature: var_eveningTemperature,
        nightTemperature: var_nightTemperature,
        condition: var_condition,
        precipitationAmount: var_precipitationAmount,
        precipitationProbability: var_precipitationProbability,
        windSpeed: var_windSpeed);
  }

  @protected
  DeletePackingListEntry sse_decode_delete_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    return DeletePackingListEntry(id: var_id);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  Flight sse_decode_flight(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_flightNumber = sse_decode_String(deserializer);
    var var_departure = sse_decode_airport(deserializer);
    var var_arrival = sse_decode_airport(deserializer);
    var var_scheduledDepartureTime = sse_decode_Chrono_Utc(deserializer);
    var var_scheduledArrivalTime = sse_decode_Chrono_Utc(deserializer);
    var var_estimatedDepartureTime =
        sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_estimatedArrivalTime =
        sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_airline = sse_decode_String(deserializer);
    return Flight(
        flightNumber: var_flightNumber,
        departure: var_departure,
        arrival: var_arrival,
        scheduledDepartureTime: var_scheduledDepartureTime,
        scheduledArrivalTime: var_scheduledArrivalTime,
        estimatedDepartureTime: var_estimatedDepartureTime,
        estimatedArrivalTime: var_estimatedArrivalTime,
        airline: var_airline);
  }

  @protected
  HourlyWeatherForecast sse_decode_hourly_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_time = sse_decode_Chrono_Utc(deserializer);
    var var_temperature = sse_decode_f_64(deserializer);
    var var_windSpeed = sse_decode_f_64(deserializer);
    var var_precipitationAmount = sse_decode_f_64(deserializer);
    var var_precipitationProbability = sse_decode_f_64(deserializer);
    var var_condition = sse_decode_weather_condition(deserializer);
    return HourlyWeatherForecast(
        time: var_time,
        temperature: var_temperature,
        windSpeed: var_windSpeed,
        precipitationAmount: var_precipitationAmount,
        precipitationProbability: var_precipitationProbability,
        condition: var_condition);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<Accomodation> sse_decode_list_accomodation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Accomodation>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_accomodation(deserializer));
    }
    return ans_;
  }

  @protected
  List<DailyWeatherForecast> sse_decode_list_daily_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DailyWeatherForecast>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_daily_weather_forecast(deserializer));
    }
    return ans_;
  }

  @protected
  List<HourlyWeatherForecast> sse_decode_list_hourly_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HourlyWeatherForecast>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_hourly_weather_forecast(deserializer));
    }
    return ans_;
  }

  @protected
  List<Location> sse_decode_list_location(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Location>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_location(deserializer));
    }
    return ans_;
  }

  @protected
  List<LocationEntry> sse_decode_list_location_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LocationEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_location_entry(deserializer));
    }
    return ans_;
  }

  @protected
  List<PackingListEntry> sse_decode_list_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PackingListEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_packing_list_entry(deserializer));
    }
    return ans_;
  }

  @protected
  List<PackingListEntryCondition> sse_decode_list_packing_list_entry_condition(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PackingListEntryCondition>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_packing_list_entry_condition(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Transit> sse_decode_list_transit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transit>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transit(deserializer));
    }
    return ans_;
  }

  @protected
  List<Trip> sse_decode_list_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Trip>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip(deserializer));
    }
    return ans_;
  }

  @protected
  List<TripAttachment> sse_decode_list_trip_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TripAttachment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip_attachment(deserializer));
    }
    return ans_;
  }

  @protected
  List<TripPackingListEntry> sse_decode_list_trip_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TripPackingListEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trip_packing_list_entry(deserializer));
    }
    return ans_;
  }

  @protected
  Location sse_decode_location(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coordinates = sse_decode_coordinates(deserializer);
    var var_city = sse_decode_String(deserializer);
    var var_country = sse_decode_String(deserializer);
    var var_forecast =
        sse_decode_opt_box_autoadd_weather_forecast(deserializer);
    var var_attachments = sse_decode_list_trip_attachment(deserializer);
    return Location(
        coordinates: var_coordinates,
        city: var_city,
        country: var_country,
        forecast: var_forecast,
        attachments: var_attachments);
  }

  @protected
  LocationEntry sse_decode_location_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_coordinates = sse_decode_coordinates(deserializer);
    var var_country = sse_decode_String(deserializer);
    return LocationEntry(
        name: var_name, coordinates: var_coordinates, country: var_country);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Trip? sse_decode_opt_box_autoadd_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_trip(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeatherForecast? sse_decode_opt_box_autoadd_weather_forecast(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weather_forecast(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PackingListEntry sse_decode_packing_list_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_conditions =
        sse_decode_list_packing_list_entry_condition(deserializer);
    var var_quantity = sse_decode_quantity(deserializer);
    var var_category = sse_decode_opt_String(deserializer);
    return PackingListEntry(
        id: var_id,
        name: var_name,
        description: var_description,
        conditions: var_conditions,
        quantity: var_quantity,
        category: var_category);
  }

  @protected
  PackingListEntryCondition sse_decode_packing_list_entry_condition(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_length = sse_decode_u_32(deserializer);
        return PackingListEntryCondition_MinTripDuration(length: var_length);
      case 1:
        var var_length = sse_decode_u_32(deserializer);
        return PackingListEntryCondition_MaxTripDuration(length: var_length);
      case 2:
        var var_temperature = sse_decode_f_64(deserializer);
        return PackingListEntryCondition_MinTemperature(
            temperature: var_temperature);
      case 3:
        var var_temperature = sse_decode_f_64(deserializer);
        return PackingListEntryCondition_MaxTemperature(
            temperature: var_temperature);
      case 4:
        var var_condition = sse_decode_weather_condition(deserializer);
        var var_minProbability = sse_decode_f_64(deserializer);
        return PackingListEntryCondition_Weather(
            condition: var_condition, minProbability: var_minProbability);
      case 5:
        var var_tag = sse_decode_String(deserializer);
        return PackingListEntryCondition_Tag(tag: var_tag);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Quantity sse_decode_quantity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_perDay = sse_decode_opt_box_autoadd_usize(deserializer);
    var var_perNight = sse_decode_opt_box_autoadd_usize(deserializer);
    var var_fixed = sse_decode_opt_box_autoadd_usize(deserializer);
    return Quantity(
        perDay: var_perDay, perNight: var_perNight, fixed: var_fixed);
  }

  @protected
  Train sse_decode_train(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_departure = sse_decode_train_station(deserializer);
    var var_arrival = sse_decode_train_station(deserializer);
    var var_scheduledDepartureTime = sse_decode_Chrono_Utc(deserializer);
    var var_scheduledArrivalTime = sse_decode_Chrono_Utc(deserializer);
    var var_estimatedDepartureTime =
        sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_estimatedArrivalTime =
        sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return Train(
        departure: var_departure,
        arrival: var_arrival,
        scheduledDepartureTime: var_scheduledDepartureTime,
        scheduledArrivalTime: var_scheduledArrivalTime,
        estimatedDepartureTime: var_estimatedDepartureTime,
        estimatedArrivalTime: var_estimatedArrivalTime);
  }

  @protected
  TrainStation sse_decode_train_station(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_scheduledPlatform = sse_decode_String(deserializer);
    var var_actualPlatform = sse_decode_opt_String(deserializer);
    var var_city = sse_decode_String(deserializer);
    var var_country = sse_decode_String(deserializer);
    return TrainStation(
        name: var_name,
        scheduledPlatform: var_scheduledPlatform,
        actualPlatform: var_actualPlatform,
        city: var_city,
        country: var_country);
  }

  @protected
  Transit sse_decode_transit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_flight(deserializer);
        return Transit_Flight(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_train(deserializer);
        return Transit_Train(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Trip sse_decode_trip(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_startDate = sse_decode_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_Chrono_Utc(deserializer);
    var var_locations = sse_decode_list_location(deserializer);
    var var_transits = sse_decode_list_transit(deserializer);
    var var_accommodations = sse_decode_list_accomodation(deserializer);
    var var_headerImage = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_attachments = sse_decode_list_trip_attachment(deserializer);
    return Trip(
        id: var_id,
        name: var_name,
        startDate: var_startDate,
        endDate: var_endDate,
        locations: var_locations,
        transits: var_transits,
        accommodations: var_accommodations,
        headerImage: var_headerImage,
        attachments: var_attachments);
  }

  @protected
  TripAttachment sse_decode_trip_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_fileName = sse_decode_String(deserializer);
    var var_contentType = sse_decode_String(deserializer);
    return TripAttachment(
        id: var_id,
        name: var_name,
        fileName: var_fileName,
        contentType: var_contentType);
  }

  @protected
  TripPackingListEntry sse_decode_trip_packing_list_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_packingListEntry = sse_decode_packing_list_entry(deserializer);
    var var_isPacked = sse_decode_bool(deserializer);
    var var_explicitHidden = sse_decode_bool(deserializer);
    var var_explicitShown = sse_decode_bool(deserializer);
    var var_quantity = sse_decode_opt_box_autoadd_usize(deserializer);
    return TripPackingListEntry(
        packingListEntry: var_packingListEntry,
        isPacked: var_isPacked,
        explicitHidden: var_explicitHidden,
        explicitShown: var_explicitShown,
        quantity: var_quantity);
  }

  @protected
  TripPackingListModel sse_decode_trip_packing_list_model(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_visible = sse_decode_list_trip_packing_list_entry(deserializer);
    var var_hidden = sse_decode_list_trip_packing_list_entry(deserializer);
    return TripPackingListModel(visible: var_visible, hidden: var_hidden);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WeatherCondition sse_decode_weather_condition(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WeatherCondition.values[inner];
  }

  @protected
  WeatherForecast sse_decode_weather_forecast(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coordinates = sse_decode_coordinates(deserializer);
    var var_hourlyForecast =
        sse_decode_list_hourly_weather_forecast(deserializer);
    var var_dailyForecast =
        sse_decode_list_daily_weather_forecast(deserializer);
    return WeatherForecast(
        coordinates: var_coordinates,
        hourlyForecast: var_hourlyForecast,
        dailyForecast: var_dailyForecast);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_accomodation(Accomodation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_location(self.location, serializer);
    sse_encode_Chrono_Utc(self.checkIn, serializer);
    sse_encode_Chrono_Utc(self.checkOut, serializer);
    sse_encode_list_trip_attachment(self.attachments, serializer);
  }

  @protected
  void sse_encode_add_packing_list_entry(
      AddPackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_list_packing_list_entry_condition(self.conditions, serializer);
    sse_encode_quantity(self.quantity, serializer);
    sse_encode_opt_String(self.category, serializer);
  }

  @protected
  void sse_encode_add_trip_attachment(
      AddTripAttachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.tripId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.path, serializer);
  }

  @protected
  void sse_encode_add_trip_location(
      AddTripLocation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.tripId, serializer);
    sse_encode_location_entry(self.location, serializer);
  }

  @protected
  void sse_encode_airport(Airport self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.iata, serializer);
    sse_encode_String(self.icao, serializer);
    sse_encode_String(self.city, serializer);
    sse_encode_String(self.country, serializer);
    sse_encode_String(self.terminal, serializer);
    sse_encode_opt_String(self.gate, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(
      DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_packing_list_entry(
      AddPackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_packing_list_entry(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_trip_attachment(
      AddTripAttachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_trip_attachment(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_add_trip_location(
      AddTripLocation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_add_trip_location(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_create_trip(
      CreateTrip self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_create_trip(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_delete_packing_list_entry(
      DeletePackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_delete_packing_list_entry(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_flight(Flight self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flight(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_train(Train self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_train(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_trip(Trip self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_trip(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weather_forecast(
      WeatherForecast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weather_forecast(self, serializer);
  }

  @protected
  void sse_encode_coordinates(Coordinates self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.latitude, serializer);
    sse_encode_f_64(self.longitude, serializer);
  }

  @protected
  void sse_encode_create_trip(CreateTrip self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_Chrono_Utc(self.startDate, serializer);
    sse_encode_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.headerImage, serializer);
  }

  @protected
  void sse_encode_daily_weather_forecast(
      DailyWeatherForecast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.day, serializer);
    sse_encode_f_64(self.minTemperature, serializer);
    sse_encode_f_64(self.maxTemperature, serializer);
    sse_encode_f_64(self.morningTemperature, serializer);
    sse_encode_f_64(self.dayTemperature, serializer);
    sse_encode_f_64(self.eveningTemperature, serializer);
    sse_encode_f_64(self.nightTemperature, serializer);
    sse_encode_weather_condition(self.condition, serializer);
    sse_encode_f_64(self.precipitationAmount, serializer);
    sse_encode_f_64(self.precipitationProbability, serializer);
    sse_encode_f_64(self.windSpeed, serializer);
  }

  @protected
  void sse_encode_delete_packing_list_entry(
      DeletePackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_flight(Flight self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.flightNumber, serializer);
    sse_encode_airport(self.departure, serializer);
    sse_encode_airport(self.arrival, serializer);
    sse_encode_Chrono_Utc(self.scheduledDepartureTime, serializer);
    sse_encode_Chrono_Utc(self.scheduledArrivalTime, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(
        self.estimatedDepartureTime, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(
        self.estimatedArrivalTime, serializer);
    sse_encode_String(self.airline, serializer);
  }

  @protected
  void sse_encode_hourly_weather_forecast(
      HourlyWeatherForecast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.time, serializer);
    sse_encode_f_64(self.temperature, serializer);
    sse_encode_f_64(self.windSpeed, serializer);
    sse_encode_f_64(self.precipitationAmount, serializer);
    sse_encode_f_64(self.precipitationProbability, serializer);
    sse_encode_weather_condition(self.condition, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_accomodation(
      List<Accomodation> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_accomodation(item, serializer);
    }
  }

  @protected
  void sse_encode_list_daily_weather_forecast(
      List<DailyWeatherForecast> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_daily_weather_forecast(item, serializer);
    }
  }

  @protected
  void sse_encode_list_hourly_weather_forecast(
      List<HourlyWeatherForecast> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_hourly_weather_forecast(item, serializer);
    }
  }

  @protected
  void sse_encode_list_location(List<Location> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_location(item, serializer);
    }
  }

  @protected
  void sse_encode_list_location_entry(
      List<LocationEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_location_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_packing_list_entry(
      List<PackingListEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_packing_list_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_packing_list_entry_condition(
      List<PackingListEntryCondition> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_packing_list_entry_condition(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_transit(List<Transit> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transit(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip(List<Trip> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip_attachment(
      List<TripAttachment> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip_attachment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_trip_packing_list_entry(
      List<TripPackingListEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trip_packing_list_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_location(Location self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_coordinates(self.coordinates, serializer);
    sse_encode_String(self.city, serializer);
    sse_encode_String(self.country, serializer);
    sse_encode_opt_box_autoadd_weather_forecast(self.forecast, serializer);
    sse_encode_list_trip_attachment(self.attachments, serializer);
  }

  @protected
  void sse_encode_location_entry(LocationEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_coordinates(self.coordinates, serializer);
    sse_encode_String(self.country, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(
      DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_trip(Trip? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_trip(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weather_forecast(
      WeatherForecast? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weather_forecast(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_packing_list_entry(
      PackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_list_packing_list_entry_condition(self.conditions, serializer);
    sse_encode_quantity(self.quantity, serializer);
    sse_encode_opt_String(self.category, serializer);
  }

  @protected
  void sse_encode_packing_list_entry_condition(
      PackingListEntryCondition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PackingListEntryCondition_MinTripDuration(length: final length):
        sse_encode_i_32(0, serializer);
        sse_encode_u_32(length, serializer);
      case PackingListEntryCondition_MaxTripDuration(length: final length):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(length, serializer);
      case PackingListEntryCondition_MinTemperature(
          temperature: final temperature
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_f_64(temperature, serializer);
      case PackingListEntryCondition_MaxTemperature(
          temperature: final temperature
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_f_64(temperature, serializer);
      case PackingListEntryCondition_Weather(
          condition: final condition,
          minProbability: final minProbability
        ):
        sse_encode_i_32(4, serializer);
        sse_encode_weather_condition(condition, serializer);
        sse_encode_f_64(minProbability, serializer);
      case PackingListEntryCondition_Tag(tag: final tag):
        sse_encode_i_32(5, serializer);
        sse_encode_String(tag, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_quantity(Quantity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_usize(self.perDay, serializer);
    sse_encode_opt_box_autoadd_usize(self.perNight, serializer);
    sse_encode_opt_box_autoadd_usize(self.fixed, serializer);
  }

  @protected
  void sse_encode_train(Train self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_train_station(self.departure, serializer);
    sse_encode_train_station(self.arrival, serializer);
    sse_encode_Chrono_Utc(self.scheduledDepartureTime, serializer);
    sse_encode_Chrono_Utc(self.scheduledArrivalTime, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(
        self.estimatedDepartureTime, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(
        self.estimatedArrivalTime, serializer);
  }

  @protected
  void sse_encode_train_station(TrainStation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.scheduledPlatform, serializer);
    sse_encode_opt_String(self.actualPlatform, serializer);
    sse_encode_String(self.city, serializer);
    sse_encode_String(self.country, serializer);
  }

  @protected
  void sse_encode_transit(Transit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Transit_Flight(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_flight(field0, serializer);
      case Transit_Train(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_train(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_trip(Trip self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_Chrono_Utc(self.startDate, serializer);
    sse_encode_Chrono_Utc(self.endDate, serializer);
    sse_encode_list_location(self.locations, serializer);
    sse_encode_list_transit(self.transits, serializer);
    sse_encode_list_accomodation(self.accommodations, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.headerImage, serializer);
    sse_encode_list_trip_attachment(self.attachments, serializer);
  }

  @protected
  void sse_encode_trip_attachment(
      TripAttachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.fileName, serializer);
    sse_encode_String(self.contentType, serializer);
  }

  @protected
  void sse_encode_trip_packing_list_entry(
      TripPackingListEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_packing_list_entry(self.packingListEntry, serializer);
    sse_encode_bool(self.isPacked, serializer);
    sse_encode_bool(self.explicitHidden, serializer);
    sse_encode_bool(self.explicitShown, serializer);
    sse_encode_opt_box_autoadd_usize(self.quantity, serializer);
  }

  @protected
  void sse_encode_trip_packing_list_model(
      TripPackingListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_trip_packing_list_entry(self.visible, serializer);
    sse_encode_list_trip_packing_list_entry(self.hidden, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_weather_condition(
      WeatherCondition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_weather_forecast(
      WeatherForecast self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_coordinates(self.coordinates, serializer);
    sse_encode_list_hourly_weather_forecast(self.hourlyForecast, serializer);
    sse_encode_list_daily_weather_forecast(self.dailyForecast, serializer);
  }
}
