// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../commands/add_trip_location.dart';
import '../commands/create_trip.dart';
import '../commands/search_web_images.dart';
import '../commands/update_trip.dart';
import '../frb_generated.dart';
import '../models.dart';
import '../models/tidal_information.dart';
import '../models/web_images.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

Future<List<TripListModel>> getTrips() =>
    RustLib.instance.api.crateApiTripsGetTrips();

Future<List<TripListModel>> getUpcomingTrips() =>
    RustLib.instance.api.crateApiTripsGetUpcomingTrips();

Future<List<TripListModel>> getPastTrips() =>
    RustLib.instance.api.crateApiTripsGetPastTrips();

Future<TripOverviewModel> getTrip({required UuidValue id}) =>
    RustLib.instance.api.crateApiTripsGetTrip(id: id);

Future<TripOverviewModel> createTrip({required CreateTrip command}) =>
    RustLib.instance.api.crateApiTripsCreateTrip(command: command);

Future<TripOverviewModel> updateTrip({required UpdateTrip command}) =>
    RustLib.instance.api.crateApiTripsUpdateTrip(command: command);

Future<void> deleteTrip({required UuidValue tripId}) =>
    RustLib.instance.api.crateApiTripsDeleteTrip(tripId: tripId);

Future<TripPackingListModel> getTripPackingList({required UuidValue tripId}) =>
    RustLib.instance.api.crateApiTripsGetTripPackingList(tripId: tripId);

Future<void> markAsPacked(
        {required UuidValue tripId, required UuidValue entryId}) =>
    RustLib.instance.api
        .crateApiTripsMarkAsPacked(tripId: tripId, entryId: entryId);

Future<void> markAsUnpacked(
        {required UuidValue tripId, required UuidValue entryId}) =>
    RustLib.instance.api
        .crateApiTripsMarkAsUnpacked(tripId: tripId, entryId: entryId);

Future<List<LocationEntry>> searchLocations({required String query}) =>
    RustLib.instance.api.crateApiTripsSearchLocations(query: query);

Future<void> addTripLocation({required AddTripLocation command}) =>
    RustLib.instance.api.crateApiTripsAddTripLocation(command: command);

Future<List<TripLocationListModel>> getTripLocations(
        {required UuidValue tripId}) =>
    RustLib.instance.api.crateApiTripsGetTripLocations(tripId: tripId);

Future<List<WebImage>> searchWebImages({required SearchWebImages command}) =>
    RustLib.instance.api.crateApiTripsSearchWebImages(command: command);

Future<Uint8List> downloadWebImage({required String imageUrl}) =>
    RustLib.instance.api.crateApiTripsDownloadWebImage(imageUrl: imageUrl);

Future<void> updateCoastalFlag(
        {required UuidValue locationId, required bool isCoastal}) =>
    RustLib.instance.api.crateApiTripsUpdateCoastalFlag(
        locationId: locationId, isCoastal: isCoastal);

Future<TripLocationListModel> getLocationDetails(
        {required UuidValue locationId}) =>
    RustLib.instance.api
        .crateApiTripsGetLocationDetails(locationId: locationId);

Future<void> deleteLocation({required UuidValue locationId}) =>
    RustLib.instance.api.crateApiTripsDeleteLocation(locationId: locationId);
