// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'models/transits.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
part 'models.freezed.dart';

class Accomodation {
  final String name;
  final Location location;
  final DateTime checkIn;
  final DateTime checkOut;
  final List<TripAttachment> attachments;

  const Accomodation({
    required this.name,
    required this.location,
    required this.checkIn,
    required this.checkOut,
    required this.attachments,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      location.hashCode ^
      checkIn.hashCode ^
      checkOut.hashCode ^
      attachments.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Accomodation &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          location == other.location &&
          checkIn == other.checkIn &&
          checkOut == other.checkOut &&
          attachments == other.attachments;
}

class Coordinates {
  final double latitude;
  final double longitude;

  const Coordinates({
    required this.latitude,
    required this.longitude,
  });

  @override
  int get hashCode => latitude.hashCode ^ longitude.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Coordinates &&
          runtimeType == other.runtimeType &&
          latitude == other.latitude &&
          longitude == other.longitude;
}

class DailyWeatherForecast {
  final DateTime day;
  final double minTemperature;
  final double maxTemperature;
  final double morningTemperature;
  final double dayTemperature;
  final double eveningTemperature;
  final double nightTemperature;
  final WeatherCondition condition;

  /// mm
  final double precipitationAmount;
  final double precipitationProbability;
  final double windSpeed;

  const DailyWeatherForecast({
    required this.day,
    required this.minTemperature,
    required this.maxTemperature,
    required this.morningTemperature,
    required this.dayTemperature,
    required this.eveningTemperature,
    required this.nightTemperature,
    required this.condition,
    required this.precipitationAmount,
    required this.precipitationProbability,
    required this.windSpeed,
  });

  @override
  int get hashCode =>
      day.hashCode ^
      minTemperature.hashCode ^
      maxTemperature.hashCode ^
      morningTemperature.hashCode ^
      dayTemperature.hashCode ^
      eveningTemperature.hashCode ^
      nightTemperature.hashCode ^
      condition.hashCode ^
      precipitationAmount.hashCode ^
      precipitationProbability.hashCode ^
      windSpeed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DailyWeatherForecast &&
          runtimeType == other.runtimeType &&
          day == other.day &&
          minTemperature == other.minTemperature &&
          maxTemperature == other.maxTemperature &&
          morningTemperature == other.morningTemperature &&
          dayTemperature == other.dayTemperature &&
          eveningTemperature == other.eveningTemperature &&
          nightTemperature == other.nightTemperature &&
          condition == other.condition &&
          precipitationAmount == other.precipitationAmount &&
          precipitationProbability == other.precipitationProbability &&
          windSpeed == other.windSpeed;
}

class HourlyWeatherForecast {
  final DateTime time;
  final double temperature;
  final double windSpeed;

  /// mm/h
  final double precipitationAmount;
  final double precipitationProbability;
  final WeatherCondition condition;

  const HourlyWeatherForecast({
    required this.time,
    required this.temperature,
    required this.windSpeed,
    required this.precipitationAmount,
    required this.precipitationProbability,
    required this.condition,
  });

  @override
  int get hashCode =>
      time.hashCode ^
      temperature.hashCode ^
      windSpeed.hashCode ^
      precipitationAmount.hashCode ^
      precipitationProbability.hashCode ^
      condition.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is HourlyWeatherForecast &&
          runtimeType == other.runtimeType &&
          time == other.time &&
          temperature == other.temperature &&
          windSpeed == other.windSpeed &&
          precipitationAmount == other.precipitationAmount &&
          precipitationProbability == other.precipitationProbability &&
          condition == other.condition;
}

class Location {
  final Coordinates coordinates;
  final String city;
  final String country;
  final WeatherForecast? forecast;
  final List<TripAttachment> attachments;

  const Location({
    required this.coordinates,
    required this.city,
    required this.country,
    this.forecast,
    required this.attachments,
  });

  @override
  int get hashCode =>
      coordinates.hashCode ^
      city.hashCode ^
      country.hashCode ^
      forecast.hashCode ^
      attachments.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Location &&
          runtimeType == other.runtimeType &&
          coordinates == other.coordinates &&
          city == other.city &&
          country == other.country &&
          forecast == other.forecast &&
          attachments == other.attachments;
}

class LocationEntry {
  final String name;
  final Coordinates coordinates;
  final String country;

  const LocationEntry({
    required this.name,
    required this.coordinates,
    required this.country,
  });

  @override
  int get hashCode => name.hashCode ^ coordinates.hashCode ^ country.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LocationEntry &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          coordinates == other.coordinates &&
          country == other.country;
}

class PackingListEntry {
  final UuidValue id;
  final String name;
  final String? description;
  final List<PackingListEntryCondition> conditions;
  final Quantity quantity;
  final String? category;

  const PackingListEntry({
    required this.id,
    required this.name,
    this.description,
    required this.conditions,
    required this.quantity,
    this.category,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      description.hashCode ^
      conditions.hashCode ^
      quantity.hashCode ^
      category.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PackingListEntry &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          description == other.description &&
          conditions == other.conditions &&
          quantity == other.quantity &&
          category == other.category;
}

@freezed
sealed class PackingListEntryCondition with _$PackingListEntryCondition {
  const PackingListEntryCondition._();

  const factory PackingListEntryCondition.minTripDuration({
    required int length,
  }) = PackingListEntryCondition_MinTripDuration;
  const factory PackingListEntryCondition.maxTripDuration({
    required int length,
  }) = PackingListEntryCondition_MaxTripDuration;
  const factory PackingListEntryCondition.minTemperature({
    required double temperature,
  }) = PackingListEntryCondition_MinTemperature;
  const factory PackingListEntryCondition.maxTemperature({
    required double temperature,
  }) = PackingListEntryCondition_MaxTemperature;
  const factory PackingListEntryCondition.weather({
    required WeatherCondition condition,
    required double minProbability,
  }) = PackingListEntryCondition_Weather;
  const factory PackingListEntryCondition.tag({
    required String tag,
  }) = PackingListEntryCondition_Tag;
}

class Quantity {
  final BigInt? perDay;
  final BigInt? perNight;
  final BigInt? fixed;

  const Quantity({
    this.perDay,
    this.perNight,
    this.fixed,
  });

  @override
  int get hashCode => perDay.hashCode ^ perNight.hashCode ^ fixed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Quantity &&
          runtimeType == other.runtimeType &&
          perDay == other.perDay &&
          perNight == other.perNight &&
          fixed == other.fixed;
}

class Trip {
  final UuidValue id;
  final String name;
  final DateTime startDate;
  final DateTime endDate;
  final List<Location> locations;
  final List<Transit> transits;
  final List<Accomodation> accommodations;
  final Uint8List? headerImage;
  final List<TripAttachment> attachments;

  const Trip({
    required this.id,
    required this.name,
    required this.startDate,
    required this.endDate,
    required this.locations,
    required this.transits,
    required this.accommodations,
    this.headerImage,
    required this.attachments,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      startDate.hashCode ^
      endDate.hashCode ^
      locations.hashCode ^
      transits.hashCode ^
      accommodations.hashCode ^
      headerImage.hashCode ^
      attachments.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Trip &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          startDate == other.startDate &&
          endDate == other.endDate &&
          locations == other.locations &&
          transits == other.transits &&
          accommodations == other.accommodations &&
          headerImage == other.headerImage &&
          attachments == other.attachments;
}

class TripAttachment {
  final UuidValue id;
  final String name;
  final String fileName;
  final String contentType;

  const TripAttachment({
    required this.id,
    required this.name,
    required this.fileName,
    required this.contentType,
  });

  @override
  int get hashCode =>
      id.hashCode ^ name.hashCode ^ fileName.hashCode ^ contentType.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TripAttachment &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          fileName == other.fileName &&
          contentType == other.contentType;
}

class TripPackingListEntry {
  final PackingListEntry packingListEntry;
  final bool isPacked;
  final bool explicitHidden;
  final bool explicitShown;
  final BigInt? quantity;

  const TripPackingListEntry({
    required this.packingListEntry,
    required this.isPacked,
    required this.explicitHidden,
    required this.explicitShown,
    this.quantity,
  });

  @override
  int get hashCode =>
      packingListEntry.hashCode ^
      isPacked.hashCode ^
      explicitHidden.hashCode ^
      explicitShown.hashCode ^
      quantity.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TripPackingListEntry &&
          runtimeType == other.runtimeType &&
          packingListEntry == other.packingListEntry &&
          isPacked == other.isPacked &&
          explicitHidden == other.explicitHidden &&
          explicitShown == other.explicitShown &&
          quantity == other.quantity;
}

class TripPackingListModel {
  final List<TripPackingListEntry> visible;
  final List<TripPackingListEntry> hidden;

  const TripPackingListModel({
    required this.visible,
    required this.hidden,
  });

  @override
  int get hashCode => visible.hashCode ^ hidden.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TripPackingListModel &&
          runtimeType == other.runtimeType &&
          visible == other.visible &&
          hidden == other.hidden;
}

enum WeatherCondition {
  thunderstorm,
  sunny,
  rain,
  clouds,
  snow,
  ;
}

class WeatherForecast {
  final Coordinates coordinates;
  final List<HourlyWeatherForecast> hourlyForecast;
  final List<DailyWeatherForecast> dailyForecast;

  const WeatherForecast({
    required this.coordinates,
    required this.hourlyForecast,
    required this.dailyForecast,
  });

  @override
  int get hashCode =>
      coordinates.hashCode ^ hourlyForecast.hashCode ^ dailyForecast.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WeatherForecast &&
          runtimeType == other.runtimeType &&
          coordinates == other.coordinates &&
          hourlyForecast == other.hourlyForecast &&
          dailyForecast == other.dailyForecast;
}
