// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'transits.freezed.dart';

class Airport {
  final String name;
  final String iata;
  final String icao;
  final String city;
  final String country;
  final String terminal;
  final String? gate;

  const Airport({
    required this.name,
    required this.iata,
    required this.icao,
    required this.city,
    required this.country,
    required this.terminal,
    this.gate,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      iata.hashCode ^
      icao.hashCode ^
      city.hashCode ^
      country.hashCode ^
      terminal.hashCode ^
      gate.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Airport &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          iata == other.iata &&
          icao == other.icao &&
          city == other.city &&
          country == other.country &&
          terminal == other.terminal &&
          gate == other.gate;
}

class Flight {
  final String flightNumber;
  final Airport departure;
  final Airport arrival;
  final DateTime scheduledDepartureTime;
  final DateTime scheduledArrivalTime;
  final DateTime? estimatedDepartureTime;
  final DateTime? estimatedArrivalTime;
  final String airline;

  const Flight({
    required this.flightNumber,
    required this.departure,
    required this.arrival,
    required this.scheduledDepartureTime,
    required this.scheduledArrivalTime,
    this.estimatedDepartureTime,
    this.estimatedArrivalTime,
    required this.airline,
  });

  @override
  int get hashCode =>
      flightNumber.hashCode ^
      departure.hashCode ^
      arrival.hashCode ^
      scheduledDepartureTime.hashCode ^
      scheduledArrivalTime.hashCode ^
      estimatedDepartureTime.hashCode ^
      estimatedArrivalTime.hashCode ^
      airline.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Flight &&
          runtimeType == other.runtimeType &&
          flightNumber == other.flightNumber &&
          departure == other.departure &&
          arrival == other.arrival &&
          scheduledDepartureTime == other.scheduledDepartureTime &&
          scheduledArrivalTime == other.scheduledArrivalTime &&
          estimatedDepartureTime == other.estimatedDepartureTime &&
          estimatedArrivalTime == other.estimatedArrivalTime &&
          airline == other.airline;
}

class Train {
  final TrainStation departure;
  final TrainStation arrival;
  final DateTime scheduledDepartureTime;
  final DateTime scheduledArrivalTime;
  final DateTime? estimatedDepartureTime;
  final DateTime? estimatedArrivalTime;

  const Train({
    required this.departure,
    required this.arrival,
    required this.scheduledDepartureTime,
    required this.scheduledArrivalTime,
    this.estimatedDepartureTime,
    this.estimatedArrivalTime,
  });

  @override
  int get hashCode =>
      departure.hashCode ^
      arrival.hashCode ^
      scheduledDepartureTime.hashCode ^
      scheduledArrivalTime.hashCode ^
      estimatedDepartureTime.hashCode ^
      estimatedArrivalTime.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Train &&
          runtimeType == other.runtimeType &&
          departure == other.departure &&
          arrival == other.arrival &&
          scheduledDepartureTime == other.scheduledDepartureTime &&
          scheduledArrivalTime == other.scheduledArrivalTime &&
          estimatedDepartureTime == other.estimatedDepartureTime &&
          estimatedArrivalTime == other.estimatedArrivalTime;
}

class TrainStation {
  final String name;
  final String scheduledPlatform;
  final String? actualPlatform;
  final String city;
  final String country;

  const TrainStation({
    required this.name,
    required this.scheduledPlatform,
    this.actualPlatform,
    required this.city,
    required this.country,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      scheduledPlatform.hashCode ^
      actualPlatform.hashCode ^
      city.hashCode ^
      country.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TrainStation &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          scheduledPlatform == other.scheduledPlatform &&
          actualPlatform == other.actualPlatform &&
          city == other.city &&
          country == other.country;
}

@freezed
sealed class Transit with _$Transit {
  const Transit._();

  const factory Transit.flight(
    Flight field0,
  ) = Transit_Flight;
  const factory Transit.train(
    Train field0,
  ) = Transit_Train;
}
